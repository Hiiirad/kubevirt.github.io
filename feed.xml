<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://kubevirt.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://kubevirt.io//" rel="alternate" type="text/html" /><updated>2021-05-01T16:54:18+00:00</updated><id>https://kubevirt.io//feed.xml</id><title type="html">KubeVirt.io</title><subtitle>Virtual Machine Management on Kubernetes</subtitle><entry><title type="html">Using Intel vGPUs with Kubevirt</title><link href="https://kubevirt.io//2021/intel-vgpu-kubevirt.html" rel="alternate" type="text/html" title="Using Intel vGPUs with Kubevirt" /><published>2021-04-30T00:00:00+00:00</published><updated>2021-04-30T00:00:00+00:00</updated><id>https://kubevirt.io//2021/intel-vgpu-kubevirt</id><content type="html" xml:base="https://kubevirt.io//2021/intel-vgpu-kubevirt.html">&lt;!-- TOC depthFrom:2 insertAnchor:false orderedList:false updateOnSave:true withLinks:true --&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#fedora-workstation-prep&quot;&gt;Fedora Workstation Prep&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#preparing-the-intel-vgpu-driver&quot;&gt;Preparing the Intel vGPU driver&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#install-kubernetes-with-minikube&quot;&gt;Install Kubernetes with minikube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#install-kubevirt&quot;&gt;Install kubevirt&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#validate-vgpu-detection&quot;&gt;Validate vGPU detection&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#install-containerize-data-importer&quot;&gt;Install Containerize Data Importer&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#install-windows&quot;&gt;Install Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#accessing-the-windows-vm&quot;&gt;Accessing the Windows VM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-the-gpu&quot;&gt;Using the GPU&lt;/a&gt;
&lt;!-- /TOC --&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Graphical User Interfaces (GUIs) have come along way over the past few years and most modern desktop environments expect some form of GPU acceleration in order to give you a seamless user experience. If you have tried running things like Windows 10 within Kubevirt you may have noticed that the desktop experience felt a little slow. This is due to Windows 10 reliance on GPU acceleration. In addition many applications are also now taking advantage of GPU acceleration and it can even be used in web based applications such as “FishGL”:
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2021-04-30-intel-vgpu-kubevirt/fishgl-nogpu.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;800x530&quot;&gt;
      &lt;img src=&quot;/assets/2021-04-30-intel-vgpu-kubevirt/fishgl-nogpu.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;FishGL&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Without GPU hardware acceleration the user experience of a Virtual machine can be greatly impacted.&lt;/p&gt;

&lt;p&gt;Starting with 5th generation Intel Core processors that have embedded Intel graphics processing units it is possible to share the graphics processor between multiple virtual machines. In Linux, this sharing of a GPU is typically enabled through the use of mediated GPU devices, also known as vGPUs. Kubevirt has supported the use of GPUs including GPU passthrough and vGPU since v0.22.0 back in 2019. This support was centered around one specific vendor, and only worked with expensive enterprise class cards and required additional licensing. Starting with &lt;a href=&quot;https://github.com/kubevirt/kubevirt/releases/tag/v0.40.0&quot;&gt;Kubevirt 0.40&lt;/a&gt; support for detecting and allocating the Intel based vGPUs has been added to Kubevirt. Support for the creation of these virtualized Intel GPUs is available in the Linux Kernel since the 4.19 release. What does this meaning for you? You no longer need additional drivers or licenses to test out GPU accelerated virtual machines.&lt;/p&gt;

&lt;p&gt;The total number of Intel vGPUs you can create is dependent on your specific hardware as well as support for changing the Graphics aperture size and shared graphics memory within your BIOS. For more details on this see &lt;a href=&quot;https://github.com/intel/gvt-linux/wiki/GVTg_Setup_Guide#53-create-vgpu-kvmgt-only&quot;&gt;Create vGPU (KVMGT only)&lt;/a&gt; in the Intel GVTg wiki. Minimally configured devices can typically make at least two vGPU devices.&lt;/p&gt;

&lt;p&gt;You can reproduce this work on any Kubernetes cluster running kubevirt v0.40.0 or later, but the steps you need to take to load the kernel modules and enable the virtual devices will vary based on the underlying OS your Kubernetes cluster is running on. In order to demonstrate how you can enable this feature, we will use an all-in-one Kubernetes cluster built using Fedora 32 and minikube.&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;This blog post is a more advanced topic and assumes some Linux and Kubernetes understanding.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before we begin you will need a few things to make use of the Intel GPU:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A workstation or server with a 5th Generation or higher Intel Core Processor, or E3_v4 or higher Xeon Processor and enough memory to virtualize one or more VMs&lt;/li&gt;
  &lt;li&gt;A preinstalled Fedora 32 Workstation with at least 50Gb of free space in the “/” filesystem&lt;/li&gt;
  &lt;li&gt;The following software:
    &lt;ul&gt;
      &lt;li&gt;minikube - See &lt;a href=&quot;https://minikube.sigs.k8s.io/docs/start/&quot;&gt;minikube start&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;virtctl - See &lt;a href=&quot;https://github.com/kubevirt/kubevirt/releases&quot;&gt;kubevirt releases&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;kubectl - See &lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/&quot;&gt;Install and Set Up kubectl on Linux&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A Windows 10 Install ISO Image - See &lt;a href=&quot;https://www.microsoft.com/en-us/software-download/windows10&quot;&gt;Download Windows 10 Disk Image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fedora-workstation-prep&quot;&gt;Fedora Workstation Prep&lt;/h3&gt;

&lt;p&gt;In order to use minikube on Fedora 32 we will be installing multiple applications that will be used throughout this demo. In addition we will be configuring the workstation to use cgroups v1 and we will be updating the firewall to allow proper communication to our Kubernetes cluster as well as any hosted applications. Finally we will be disabling SELinux per the minikube bare-metal install instructions:&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;This post assumes that we are starting with a fresh install of Fedora 32. If you are using an existing configured Fedora 32 Workstation, you may have some software conflicts.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dnf update -y
sudo dnf install -y pciutils podman podman-docker conntrack tigervnc rdesktop
sudo grubby --update-kernel=ALL --args=&quot;systemd.unified_cgroup_hierarchy=0&quot;
# Setup firewall rules to allow inbound and outbound connections from your minikube cluster
sudo firewall-cmd --add-port=30000-65535/tcp --permanent
sudo firewall-cmd --add-port=30000-65535/udp --permanent
sudo firewall-cmd --add-port=10250-10252/tcp --permanent
sudo firewall-cmd --add-port=10248/tcp --permanent
sudo firewall-cmd --add-port=2379-2380/tcp --permanent
sudo firewall-cmd --add-port=6443/tcp --permanent
sudo firewall-cmd --add-port=8443/tcp --permanent
sudo firewall-cmd --add-port=9153/tcp --permanent
sudo firewall-cmd --add-service=dns --permanent
sudo firewall-cmd --add-interface=cni-podman0 --permanent
sudo firewall-cmd --add-masquerade --permanent
sudo vi /etc/selinux/config
# change the &quot;SELINUX=enforcing&quot; to &quot;SELINUX=permissive&quot;
sudo setenforce 0
sudo systemctl enable sshd --now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will now install the CRIO runtime:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dnf module enable -y cri-o:1.18
sudo dnf install -y cri-o cri-tools
sudo systemctl enable --now crio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;preparing-the-intel-vgpu-driver&quot;&gt;Preparing the Intel vGPU driver&lt;/h3&gt;

&lt;p&gt;In order to make use of the Intel vGPU driver, we need to make a few changes to our all-in-one host. The commands below assume you are using a Fedora based host. If you are using a different base OS, be sure to update your commands for that specific distribution.&lt;/p&gt;

&lt;p&gt;The following commands will do the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;load the kvmgt module to enable support within kvm&lt;/li&gt;
  &lt;li&gt;enable gvt in the i915 module&lt;/li&gt;
  &lt;li&gt;update the Linux kernel to enable Intel IOMMU&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo kvmgt &amp;gt; /etc/modules-load.d/gpu-kvmgt.conf&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;grubby &lt;span class=&quot;nt&quot;&gt;--update-kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ALL &lt;span class=&quot;nt&quot;&gt;--args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;intel_iommu=on i915.enable_gvt=1&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;shutdown &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the reboot check to ensure that the proper kernel modules have been loaded:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;lsmod | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;kvmgt
kvmgt                  32768  0
mdev                   20480  2 kvmgt,vfio_mdev
vfio                   32768  3 kvmgt,vfio_mdev,vfio_iommu_type1
kvm                   798720  2 kvmgt,kvm_intel
i915                 2494464  4 kvmgt
drm                   557056  4 drm_kms_helper,kvmgt,i915
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will now create our vGPU devices. These virtual devices are created by echoing a GUID into a sys device created by the Intel driver. This needs to be done every time the system boots. The easiest way to do this is using a systemd service that runs on every boot. Before we create this systemd service, we need to validate the PCI ID of your Intel Graphics card. To do this we will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lspci&lt;/code&gt; command&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;lspci
00:00.0 Host bridge: Intel Corporation Device 9b53 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;rev 03&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
00:02.0 VGA compatible controller: Intel Corporation Device 9bc8 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;rev 03&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
00:08.0 System peripheral: Intel Corporation Xeon E3-1200 v5/v6 / E3-1500 v5 / 6th/7th/8th Gen Core Processor Gaussian Mixture Model
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Take note that in the above output the Intel GPU is on “00:02.0”. Now create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/systemd/system/gvtg-enable.service&lt;/code&gt; but be sure to update the PCI ID as appropriate for your machine:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/gvtg-enable.service &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
[Unit]
Description=Create Intel GVT-g vGPU

[Service]
Type=oneshot
ExecStart=/bin/sh -c &quot;echo '56a4c4e2-c81f-4cba-82bf-af46c30ea32d' &amp;gt; /sys/devices/pci0000:00/0000:00:02.0/mdev_supported_types/i915-GVTg_V5_8/create&quot;
ExecStart=/bin/sh -c &quot;echo '973069b7-2025-406b-b3c9-301016af3150' &amp;gt; /sys/devices/pci0000:00/0000:00:02.0/mdev_supported_types/i915-GVTg_V5_8/create&quot;
ExecStop=/bin/sh -c &quot;echo '1' &amp;gt; /sys/devices/pci0000:00/0000:00:02.0/56a4c4e2-c81f-4cba-82bf-af46c30ea32d/remove&quot;
ExecStop=/bin/sh -c &quot;echo '1' &amp;gt; /sys/devices/pci0000:00/0000:00:02.0/973069b7-2025-406b-b3c9-301016af3150/remove&quot;
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mv&lt;/span&gt; ~/gvtg-enable.service /etc/systemd/system/gvtg-enable.service
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;gvtg-enable &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;The above systemd service will create two vGPU devices, you can repeat the commands with additional unique GUIDs up to a maximum of 8 vGPU if your particular hardware supports it.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can validate that the vGPU devices were created by looking in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/devices/pci0000:00/0000:00:02.0/&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lsa&lt;/span&gt; /sys/devices/pci0000:00/0000:00:02.0/56a4c4e2-c81f-4cba-82bf-af46c30ea32d
total 0
lrwxrwxrwx. 1 root root    0 Apr 20 13:56 driver -&amp;gt; ../../../../bus/mdev/drivers/vfio_mdev
drwxr-xr-x. 2 root root    0 Apr 20 14:41 intel_vgpu
lrwxrwxrwx. 1 root root    0 Apr 20 14:41 iommu_group -&amp;gt; ../../../../kernel/iommu_groups/8
lrwxrwxrwx. 1 root root    0 Apr 20 14:41 mdev_type -&amp;gt; ../mdev_supported_types/i915-GVTg_V5_8
drwxr-xr-x. 2 root root    0 Apr 20 14:41 power
&lt;span class=&quot;nt&quot;&gt;--w-------&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 1 root root 4096 Apr 20 14:41 remove
lrwxrwxrwx. 1 root root    0 Apr 20 13:56 subsystem -&amp;gt; ../../../../bus/mdev
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 1 root root 4096 Apr 20 13:56 uevent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that “mdev_type” points to “i915-GVTg_V5_8”, this will come into play later when we configure kubevirt to detect the vGPU.&lt;/p&gt;

&lt;h2 id=&quot;install-kubernetes-with-minikube&quot;&gt;Install Kubernetes with minikube&lt;/h2&gt;

&lt;p&gt;We will now install Kubernetes onto our Fedora Workstation. &lt;a href=&quot;https://minikube.sigs.k8s.io/docs/&quot;&gt;Minikube&lt;/a&gt; will help quickly set up our Kubernetes cluster environment. We will start by getting the latest release of minikube and kubectl.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-LO&lt;/span&gt; https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
&lt;span class=&quot;nb&quot;&gt;sudo install &lt;/span&gt;minikube-linux-amd64 /usr/local/bin/minikube
&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;minikube kubectl version | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'print $3'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'print $2'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed &lt;/span&gt;s/&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;//g&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/.minikube/cache/linux/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/kubectl /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will be using the minikube driver “none” which will install Kubernetes directly onto this machine. This will allow you to maintain a copy of the virtual machines that you build through a reboot. Later in this post we will create persistent volumes for virtual machine storage in “/data”. As previously noted, ensure that you have at least 50Gb of free space in “/data” to complete this setup. The minikube install will take a few minutes to complete.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /data/winhd1-pv
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;minikube start &lt;span class=&quot;nt&quot;&gt;--driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none &lt;span class=&quot;nt&quot;&gt;--container-runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;crio
😄  minikube v1.19.0 on Fedora 32
✨  Using the none driver based on user configuration
👍  Starting control plane node minikube &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;cluster minikube
🤹  Running on localhost &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CPUs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12, &lt;span class=&quot;nv&quot;&gt;Memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;31703MB, &lt;span class=&quot;nv&quot;&gt;Disk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;71645MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
ℹ️  OS release is Fedora 32 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Workstation Edition&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
🐳  Preparing Kubernetes v1.20.2 on Docker 20.10.6 ...
    ▪ Generating certificates and keys ...
    ▪ Booting up control plane ...
    ▪ Configuring RBAC rules ...
🤹  Configuring &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;host environment ...
🔎  Verifying Kubernetes components...
    ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
🌟  Enabled addons: storage-provisioner, default-storageclass
🏄  Done! kubectl is now configured to use &lt;span class=&quot;s2&quot;&gt;&quot;minikube&quot;&lt;/span&gt; cluster and &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt; namespace by default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to make our interaction with Kubernetes a little easier, we will need to copy some files and update our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.kube/config&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p ~/.minikube/profiles/minikube
sudo cp -r /root/.kube /home/$USER
sudo cp /root/.minikube/ca.crt /home/$USER/.minikube/ca.crt
sudo cp /root/.minikube/profiles/minikube/client.crt /home/$USER/.minikube/profiles/minikube
sudo cp /root/.minikube/profiles/minikube/client.key /home/$USER/.minikube/profiles/minikube
sudo chown -R $USER:$USER /home/$USER/.kube
sudo chown -R $USER:$USER /home/$USER/.minikube
sed -i  &quot;s/root/home\/$USER/&quot; ~/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the minikube install is complete, validate that everything is working properly.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get nodes
NAME       STATUS   ROLES                  AGE    VERSION
kubevirt   Ready    control-plane,master   4m5s   v1.20.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As long as you don’t get any errors, your base Kubernetes cluster is ready to go.&lt;/p&gt;

&lt;h2 id=&quot;install-kubevirt&quot;&gt;Install kubevirt&lt;/h2&gt;

&lt;p&gt;Our all-in-one Kubernetes cluster is now ready for installing Installing Kubevirt. Using the minikube addons manager, we will install kubevirt into our cluster:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;minikube addons &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kubevirt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kubevirt &lt;span class=&quot;nb&quot;&gt;wait &lt;/span&gt;kubevirt kubevirt &lt;span class=&quot;nt&quot;&gt;--for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Available &lt;span class=&quot;nt&quot;&gt;--timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;300s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, we need to update our instance of kubevirt in the cluster. We need to configure kubevirt to detect the Intel vGPU by giving it an &lt;em&gt;mdevNameSelector&lt;/em&gt; to look for, and a &lt;em&gt;resourceName&lt;/em&gt; to assign to it. The &lt;em&gt;mdevNameSelector&lt;/em&gt; comes from the “mdev_type” that we identified earlier when we created the two virtual GPUs. When the kubevirt device manager finds instances of this mdev type, it will record this information and tag the node with the identified resourceName. We will use this resourceName later when we start up our virtual machine.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; kubevirt-patch.yaml &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
spec:
  configuration:
    developerConfiguration:
      featureGates:
      - GPU
    permittedHostDevices:
      mediatedDevices:
      - mdevNameSelector: &quot;i915-GVTg_V5_8&quot;
        resourceName: &quot;intel.com/U630&quot;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;kubectl patch kubevirt kubevirt &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kubevirt &lt;span class=&quot;nt&quot;&gt;--patch&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;kubevirt-patch.yaml&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;merge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now need to wait for kubevirt to reload its configuration.&lt;/p&gt;

&lt;h3 id=&quot;validate-vgpu-detection&quot;&gt;Validate vGPU detection&lt;/h3&gt;

&lt;p&gt;Now that kubevirt is installed and running, lets ensure that the vGPU was identified correctly. Describe the minikube node, using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl describe node&lt;/code&gt; and look for the “Capacity” section. If kubevirt properly detected the vGPU you will see an entry for “intel.com/U630” with a capacity value of greater than 0.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl describe node
Name:               kubevirt
Roles:              control-plane,master
Labels:             beta.kubernetes.io/arch&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;amd64
                    beta.kubernetes.io/os&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux
...
Capacity:
  cpu:                            12
  devices.kubevirt.io/kvm:        110
  devices.kubevirt.io/tun:        110
  devices.kubevirt.io/vhost-net:  110
  ephemeral-storage:              71645Mi
  hugepages-1Gi:                  0
  hugepages-2Mi:                  0
  intel.com/U630:                 2
  memory:                         11822640Ki
  pods:                           110
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There it is, intel.com/U630 - two of them are available.  Now all we need is a virtual machine to consume them.&lt;/p&gt;

&lt;h3 id=&quot;install-containerize-data-importer&quot;&gt;Install Containerize Data Importer&lt;/h3&gt;

&lt;p&gt;In order to install Windows 10, we are going to need to upload a Windows 10 install ISO to the cluster. This can be facilitated through the use of the Containerized Data Importer. The following steps are taken from the &lt;a href=&quot;https://kubevirt.io/labs/kubernetes/lab2.html&quot;&gt;Experiment with the Containerized Data Importer (CDI)&lt;/a&gt; web page:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://github.com/kubevirt/containerized-data-importer/releases/latest | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;v[0-9]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0-9]*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0-9]*&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://github.com/kubevirt/containerized-data-importer/releases/download/&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;/cdi-operator.yaml
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://github.com/kubevirt/containerized-data-importer/releases/download/&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;/cdi-cr.yaml
kubectl &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; cdi &lt;span class=&quot;nb&quot;&gt;wait &lt;/span&gt;cdi cdi &lt;span class=&quot;nt&quot;&gt;--for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Available &lt;span class=&quot;nt&quot;&gt;--timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;300s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that our CDI is available, we will expose it for consumption using a nodePort. This will allow us to connect to the cdi-proxy in the next steps.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cdi-nodeport.yaml &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
apiVersion: v1
kind: Service
metadata:
  name: cdi-proxy-nodeport
  namespace: cdi
spec:
  type: NodePort
  selector:
    cdi.kubevirt.io: cdi-uploadproxy
  ports:
    - port: 8443
      nodePort: 30443
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; cdi-nodeport.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One final step, lets get the latest release of virtctl which we will be using as we install Windows.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VERSION=$(kubectl get kubevirt.kubevirt.io/kubevirt -n kubevirt -o=jsonpath=&quot;{.status.observedKubeVirtVersion}&quot;)
curl -L -o virtctl https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/virtctl-${VERSION}-linux-amd64
sudo install virtctl /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;install-windows&quot;&gt;Install Windows&lt;/h2&gt;

&lt;p&gt;At this point we can now install a Windows VM in order to test this feature. The steps below are based on &lt;a href=&quot;https://kubevirt.io/2020/KubeVirt-installing_Microsoft_Windows_from_an_iso.html&quot;&gt;KubeVirt: installing Microsoft Windows from an ISO&lt;/a&gt; however we will be using Windows 10 instead of Windows Server 2012. The commands below assume that you have a Windows 10 ISO file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;win10-virtio.iso&lt;/code&gt;. If you need a Windows 10 CD, please see &lt;a href=&quot;https://www.microsoft.com/en-us/software-download/windows10&quot;&gt;Download Windows 10 Disk Image&lt;/a&gt; and come back here after you have obtained your install CD.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtctl image-upload &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--image-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;win10-virtio.iso &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--pvc-name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;iso-win10 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--access-mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ReadWriteOnce &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--pvc-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6G &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--uploadproxy-url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://127.0.0.1:30443 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--insecure&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--wait-secs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;240
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need a place to store our Windows 10 virtual disk, use the following to create a 40Gb space to store our file. In order to do this within minikube we will manually create a PersistentVolume (PV) as well as a PersistentVolumeClaim (PVC). These steps assume that you have 45+ GiB of free space in “/”.  We will create a “/data” directory as well as a subdirectory for storing our PV. If you do not have at least 45 GiB of free space in “/”, you will need to free up space, or mount storage on “/data” to continue.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; win10-pvc.yaml &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pvwinhd1
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 43Gi
  claimRef:
    namespace: default
    name: winhd1
  hostPath:
    path: /data/winhd1-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: winhd1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 40Gi
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; win10-pvc.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now create our Windows 10 virtual machine. Use the following to create a virtual machine definition file that includes a vGPU:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; win10vm1.yaml &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
apiVersion: kubevirt.io/v1alpha3
kind: VirtualMachine
metadata:
  name: win10vm1
spec:
  running: false
  template:
    metadata:
      creationTimestamp: null
      labels:
        kubevirt.io/domain: win10vm1
    spec:
      domain:
        clock:
          timer:
            hpet:
              present: false
            hyperv: {}
            pit:
              tickPolicy: delay
            rtc:
              tickPolicy: catchup
          utc: {}
        cpu:
          cores: 1
          sockets: 2
          threads: 1
        devices:
          gpus:
          - deviceName: intel.com/U630
            name: gpu1
          disks:
          - cdrom:
              bus: sata
            name: windows-guest-tools
          - bootOrder: 1
            cdrom:
              bus: sata
            name: cdrom
          - bootOrder: 2
            disk:
              bus: sata
            name: disk-1
          inputs:
          - bus: usb
            name: tablet
            type: tablet
          interfaces:
          - masquerade: {}
            model: e1000e
            name: nic-0
        features:
          acpi: {}
          apic: {}
          hyperv:
            relaxed: {}
            spinlocks:
              spinlocks: 8191
            vapic: {}
        machine:
          type: pc-q35-rhel8.2.0
        resources:
          requests:
            memory: 8Gi
      hostname: win10vm1
      networks:
      - name: nic-0
        pod: {}
      terminationGracePeriodSeconds: 3600
      volumes:
        - name: cdrom
          persistentVolumeClaim:
            claimName: iso-win10
        - name: disk-1
          persistentVolumeClaim:
            claimName: winhd1
        - containerDisk:
            image: quay.io/kubevirt/virtio-container-disk
          name: windows-guest-tools
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; win10vm1.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;NOTE&lt;/p&gt;&lt;p&gt;This VM is not optimized to use virtio devices to simplify the OS install. By using SATA devices as well as an emulated e1000 network card, we do not need to worry about loading additional drivers.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The key piece of information that we have added to this virtual machine definition is this snippet of yaml:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;na&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;gpus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;deviceName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;intel.com/U630&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gpu1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we are identifying the gpu device that we want to attach to this VM. The deviceName relates back to the name that we gave to kubevirt to identify the Intel GPU resources. It also is the same identifier that shows up in the “Capacity” section of a node when you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl describe node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can now start the virtual machine:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;virtctl start win10vm1
kubectl get vmi --watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the output of shows that the vm is in a “Running” phase you can “CTRL+C” to end the watch command.&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-windows-vm&quot;&gt;Accessing the Windows VM&lt;/h2&gt;

&lt;p&gt;Since we are running this VM on this local machine, we can now take advantage of the virtctl command to connect to the VNC console of the virtual machine.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtctl vnc win10vm1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A new VNC Viewer window will open and you should now see the Windows 10 install screen. Follow standard Windows 10 install steps at this point.&lt;/p&gt;

&lt;p&gt;Once the install is complete you have a Windows 10 VM running with a GPU available. You can test that GPU acceleration is available by opening the Windows 10 task manager, selecting Advanced and then select the “Performance” tab. Note that the first time you start up, Windows is still detecting and installing the appropriate drivers. It may take a minute or two for the GPU information to show up in the Performance tab.&lt;/p&gt;

&lt;p&gt;Try testing out the GPU acceleration. Open a web browser in your VM and navigate to “http://www.fishgl.com” HOWEVER don’t be surprised by the poor performance. The default kubevirt console does not take advantage of the GPU. For that we need to take one final step to use the Windows Remote Desktop Protocol (RDP) which can use the GPU.&lt;/p&gt;

&lt;h2 id=&quot;using-the-gpu&quot;&gt;Using the GPU&lt;/h2&gt;

&lt;p&gt;In order to take advantage of the virtual GPU we have added, we will need to connect to the virtual machine over Remote Desktop Protocol (RDP). Follow these steps to enable RDP:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;In the Windows 10 search bar, type “&lt;strong&gt;Remote Desktop Settings&lt;/strong&gt;” and then open the result.&lt;/li&gt;
  &lt;li&gt;Select “&lt;strong&gt;Enable Remote Desktop&lt;/strong&gt;” and confirm the change.&lt;/li&gt;
  &lt;li&gt;Select “&lt;strong&gt;Advanced settings&lt;/strong&gt;” and un-check “&lt;strong&gt;Require computers to use Network level Authentication&lt;/strong&gt;”, and confirm this change.&lt;/li&gt;
  &lt;li&gt;Finally reboot the Windows 10 Virtual machine.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, run the following commands in order to expose the RDP server to outside your Kubernetes cluster:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtctl expose vm win10vm1 &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3389 &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NodePort &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;win10vm1-rdp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get svc
NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          AGE
kubernetes     ClusterIP   10.96.0.1        &amp;lt;none&amp;gt;        443/TCP          18h
win10vm1-rdp   NodePort    10.105.159.184   &amp;lt;none&amp;gt;        3389:30627/TCP   39s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the port that was assigned to this service we will use it in the next step. In the above output the port is 30627.&lt;/p&gt;

&lt;p&gt;We can now use the rdesktop tool to connect to our VM and get the full advantages of the vGPU. From a command line run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdesktop localhost:&amp;lt;port&amp;gt;&lt;/code&gt; being sure to update the port based on the output from above. When prompted by rdesktop accept the certificate. Log into your Windows 10 client. You can now test out the vGPU.&lt;/p&gt;

&lt;p&gt;Let’s try FishGL again. Open a browser and go to &lt;a href=&quot;http://www.fishgl.com&quot;&gt;http://www.fishgl.com&lt;/a&gt;. You should notice a large improvement in the applications performance. You can also open the Task Manager and look at the performance tab to see the GPU under load.
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2021-04-30-intel-vgpu-kubevirt/fishgl-gpu.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;800x530&quot;&gt;
      &lt;img src=&quot;/assets/2021-04-30-intel-vgpu-kubevirt/fishgl-gpu.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;FishGL&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Note that since you are running your Fedora 32 workstation on this same GPU you are already sharing the graphics workload between your primary desktop, and the virtualized Windows Desktop also running on this machine.&lt;/p&gt;

&lt;p&gt;Congratulations! You now have a VM running in Kubernetes using an Intel vGPU. If your test machine has enough resources you can repeat the steps and create multiple virtual machines all sharing the one Intel GPU.&lt;/p&gt;</content><author><name>Mark DeNeve</name></author><category term="news" /><category term="kubevirt" /><category term="vGPU" /><category term="Windows" /><category term="GPU" /><category term="Intel" /><category term="minikube" /><category term="Fedora" /><summary type="html">Introduction Prerequisites Fedora Workstation Prep Preparing the Intel vGPU driver Install Kubernetes with minikube Install kubevirt Validate vGPU detection Install Containerize Data Importer Install Windows Accessing the Windows VM Using the GPU</summary></entry><entry><title type="html">Automated Windows Installation With Tekton Pipelines</title><link href="https://kubevirt.io//2021/Automated-Windows-Installation-With-Tekton-Pipelines.html" rel="alternate" type="text/html" title="Automated Windows Installation With Tekton Pipelines" /><published>2021-04-21T00:00:00+00:00</published><updated>2021-04-21T00:00:00+00:00</updated><id>https://kubevirt.io//2021/Automated-Windows-Installation-With-Tekton-Pipelines</id><content type="html" xml:base="https://kubevirt.io//2021/Automated-Windows-Installation-With-Tekton-Pipelines.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This blog shows how we can easily automate a process of installing Windows VMs on KubeVirt with &lt;a href=&quot;https://github.com/tektoncd/pipeline&quot;&gt;Tekton Pipelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tekton Pipelines can be used to create a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipeline&lt;/code&gt; that encapsulates the installation process which can be run and replicated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PipelineRuns&lt;/code&gt;. 
The pipeline will be built with &lt;a href=&quot;https://github.com/kubevirt/kubevirt-tekton-tasks&quot;&gt;KubeVirt Tekton Tasks&lt;/a&gt;, which includes all the necessary tasks for this example.&lt;/p&gt;

&lt;h2 id=&quot;pipeline-description&quot;&gt;Pipeline Description&lt;/h2&gt;

&lt;p&gt;The pipeline will prepare an empty Persistent Volume Claim (PVC) and download a Windows source ISO into another PVC. Both of them will be initialized with Containerized Data Importer (CDI).
It will then spin up an installation VM and use Windows Answer Files to automatically install the VM.
Then the pipeline will wait for the installation to complete and will delete the installation VM while keeping the artifact PVC with the installed operating system.
You can later use the artifact PVC as a base image and copy it for new VMs.&lt;/p&gt;
&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;KubeVirt &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.39.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Tekton Pipelines &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.19.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;KubeVirt Tekton Tasks &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.3.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;running-windows-installer-pipeline&quot;&gt;Running Windows Installer Pipeline&lt;/h1&gt;

&lt;h2 id=&quot;obtaining-a-url-of-windows-source-iso&quot;&gt;Obtaining a URL of Windows Source ISO&lt;/h2&gt;

&lt;p&gt;First we have to obtain a Download URL of Windows Source ISO.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to https://www.microsoft.com/en-us/software-download/windows10ISO. You can also obtain a server edition for evaluation at https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2019.&lt;/li&gt;
  &lt;li&gt;Fill in the edition and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;English&lt;/code&gt; language (other languages need to be updated in windows-10-autounattend ConfigMap below) and go to the download page.&lt;/li&gt;
  &lt;li&gt;Right-click on the 64-bit download button and copy the download link. The link should be valid for 24 hours.  We will need this URL a bit later when running the pipeline.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;preparing-autounattendxml-configmap&quot;&gt;Preparing autounattend.xml ConfigMap&lt;/h2&gt;

&lt;p&gt;Now we have to prepare our autounattend.xml Answer File with the installation instructions. We will store it in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigMap&lt;/code&gt;, but optionally it can be stored in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Secret&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;The configuration file can be generated with &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/wsim/windows-system-image-manager-overview-topics&quot;&gt;Windows SIM&lt;/a&gt;
or it can be specified manually according to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/wsim/answer-files-overview&quot;&gt;Answer File Reference&lt;/a&gt;
and &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/components-b-unattend&quot;&gt;Answer File Components Reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following config map includes the required drivers and guest disk configuration.
It also specifies how the installation should proceed and what users should be created. 
In our case it is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Administrator&lt;/code&gt; user with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changepassword&lt;/code&gt; password. 
You can also change the Answer File according to your needs by consulting the already mentioned documentation.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows-10-autounattend&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;Autounattend.xml&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;unattend xmlns=&quot;urn:schemas-microsoft-com:unattend&quot;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;settings pass=&quot;windowsPE&quot;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;component name=&quot;Microsoft-Windows-PnpCustomizationsWinPE&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; language=&quot;neutral&quot; versionScope=&quot;nonSxS&quot; processorArchitecture=&quot;amd64&quot; xmlns:wcm=&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;DriverPaths&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;PathAndCredentials wcm:action=&quot;add&quot; wcm:keyValue=&quot;1&quot;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Path&amp;gt;E:\viostor\w10\amd64&amp;lt;/Path&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/PathAndCredentials&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;PathAndCredentials wcm:action=&quot;add&quot; wcm:keyValue=&quot;2&quot;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Path&amp;gt;E:\NetKVM\w10\amd64&amp;lt;/Path&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/PathAndCredentials&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;PathAndCredentials wcm:action=&quot;add&quot; wcm:keyValue=&quot;3&quot;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Path&amp;gt;E:\viorng\w10\amd64&amp;lt;/Path&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/PathAndCredentials&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;/DriverPaths&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;component name=&quot;Microsoft-Windows-International-Core-WinPE&quot; processorArchitecture=&quot;amd64&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; language=&quot;neutral&quot; versionScope=&quot;nonSxS&quot; xmlns:wcm=&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;SetupUILanguage&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;UILanguage&amp;gt;en-US&amp;lt;/UILanguage&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;/SetupUILanguage&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;InputLocale&amp;gt;0409:00000409&amp;lt;/InputLocale&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;SystemLocale&amp;gt;en-US&amp;lt;/SystemLocale&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;UILanguage&amp;gt;en-US&amp;lt;/UILanguage&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;UILanguageFallback&amp;gt;en-US&amp;lt;/UILanguageFallback&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;UserLocale&amp;gt;en-US&amp;lt;/UserLocale&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;component name=&quot;Microsoft-Windows-Setup&quot; processorArchitecture=&quot;amd64&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; language=&quot;neutral&quot; versionScope=&quot;nonSxS&quot; xmlns:wcm=&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;DiskConfiguration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;Disk wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;CreatePartitions&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;CreatePartition wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Order&amp;gt;1&amp;lt;/Order&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Type&amp;gt;Primary&amp;lt;/Type&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Size&amp;gt;100&amp;lt;/Size&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;/CreatePartition&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;CreatePartition wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Extend&amp;gt;true&amp;lt;/Extend&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Order&amp;gt;2&amp;lt;/Order&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Type&amp;gt;Primary&amp;lt;/Type&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;/CreatePartition&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;/CreatePartitions&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;ModifyPartitions&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;ModifyPartition wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Active&amp;gt;true&amp;lt;/Active&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Format&amp;gt;NTFS&amp;lt;/Format&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Label&amp;gt;System Reserved&amp;lt;/Label&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Order&amp;gt;1&amp;lt;/Order&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;PartitionID&amp;gt;1&amp;lt;/PartitionID&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;TypeID&amp;gt;0x27&amp;lt;/TypeID&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;/ModifyPartition&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;ModifyPartition wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Active&amp;gt;true&amp;lt;/Active&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Format&amp;gt;NTFS&amp;lt;/Format&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Label&amp;gt;OS&amp;lt;/Label&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Letter&amp;gt;C&amp;lt;/Letter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Order&amp;gt;2&amp;lt;/Order&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;PartitionID&amp;gt;2&amp;lt;/PartitionID&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;/ModifyPartition&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;/ModifyPartitions&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;DiskID&amp;gt;0&amp;lt;/DiskID&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;WillWipeDisk&amp;gt;true&amp;lt;/WillWipeDisk&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/Disk&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;/DiskConfiguration&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;ImageInstall&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;OSImage&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;InstallTo&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;DiskID&amp;gt;0&amp;lt;/DiskID&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;PartitionID&amp;gt;2&amp;lt;/PartitionID&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;/InstallTo&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;InstallToAvailablePartition&amp;gt;false&amp;lt;/InstallToAvailablePartition&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/OSImage&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;/ImageInstall&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;UserData&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;AcceptEula&amp;gt;true&amp;lt;/AcceptEula&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;FullName&amp;gt;Administrator&amp;lt;/FullName&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;Organization&amp;gt;&amp;lt;/Organization&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;ProductKey&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Key&amp;gt;W269N-WFGWX-YVC9B-4J6C9-T83GX&amp;lt;/Key&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/ProductKey&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;/UserData&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;settings pass=&quot;offlineServicing&quot;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;component name=&quot;Microsoft-Windows-LUA-Settings&quot; processorArchitecture=&quot;amd64&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; language=&quot;neutral&quot; versionScope=&quot;nonSxS&quot; xmlns:wcm=&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;EnableLUA&amp;gt;false&amp;lt;/EnableLUA&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;settings pass=&quot;generalize&quot;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;component name=&quot;Microsoft-Windows-Security-SPP&quot; processorArchitecture=&quot;amd64&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; language=&quot;neutral&quot; versionScope=&quot;nonSxS&quot; xmlns:wcm=&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;SkipRearm&amp;gt;1&amp;lt;/SkipRearm&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;settings pass=&quot;specialize&quot;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;component name=&quot;Microsoft-Windows-International-Core&quot; processorArchitecture=&quot;amd64&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; language=&quot;neutral&quot; versionScope=&quot;nonSxS&quot; xmlns:wcm=&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;InputLocale&amp;gt;0409:00000409&amp;lt;/InputLocale&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;SystemLocale&amp;gt;en-US&amp;lt;/SystemLocale&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;UILanguage&amp;gt;en-US&amp;lt;/UILanguage&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;UILanguageFallback&amp;gt;en-US&amp;lt;/UILanguageFallback&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;UserLocale&amp;gt;en-US&amp;lt;/UserLocale&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;component name=&quot;Microsoft-Windows-Security-SPP-UX&quot; processorArchitecture=&quot;amd64&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; language=&quot;neutral&quot; versionScope=&quot;nonSxS&quot; xmlns:wcm=&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;SkipAutoActivation&amp;gt;true&amp;lt;/SkipAutoActivation&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;component name=&quot;Microsoft-Windows-SQMApi&quot; processorArchitecture=&quot;amd64&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; language=&quot;neutral&quot; versionScope=&quot;nonSxS&quot; xmlns:wcm=&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;CEIPEnabled&amp;gt;0&amp;lt;/CEIPEnabled&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;component name=&quot;Microsoft-Windows-Shell-Setup&quot; processorArchitecture=&quot;amd64&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; language=&quot;neutral&quot; versionScope=&quot;nonSxS&quot; xmlns:wcm=&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;ComputerName&amp;gt;WindowsVM&amp;lt;/ComputerName&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;ProductKey&amp;gt;W269N-WFGWX-YVC9B-4J6C9-T83GX&amp;lt;/ProductKey&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;settings pass=&quot;oobeSystem&quot;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;component name=&quot;Microsoft-Windows-Shell-Setup&quot; processorArchitecture=&quot;amd64&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; language=&quot;neutral&quot; versionScope=&quot;nonSxS&quot; xmlns:wcm=&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;AutoLogon&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;Password&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Value&amp;gt;changepassword&amp;lt;/Value&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;PlainText&amp;gt;true&amp;lt;/PlainText&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/Password&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;Enabled&amp;gt;true&amp;lt;/Enabled&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;Username&amp;gt;Administrator&amp;lt;/Username&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;/AutoLogon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;OOBE&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;HideEULAPage&amp;gt;true&amp;lt;/HideEULAPage&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;HideOEMRegistrationScreen&amp;gt;true&amp;lt;/HideOEMRegistrationScreen&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;HideOnlineAccountScreens&amp;gt;true&amp;lt;/HideOnlineAccountScreens&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;HideWirelessSetupInOOBE&amp;gt;true&amp;lt;/HideWirelessSetupInOOBE&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;NetworkLocation&amp;gt;Home&amp;lt;/NetworkLocation&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;SkipUserOOBE&amp;gt;true&amp;lt;/SkipUserOOBE&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;SkipMachineOOBE&amp;gt;true&amp;lt;/SkipMachineOOBE&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;ProtectYourPC&amp;gt;3&amp;lt;/ProtectYourPC&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;/OOBE&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;UserAccounts&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;LocalAccounts&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;LocalAccount wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;Password&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;Value&amp;gt;changepassword&amp;lt;/Value&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&amp;lt;PlainText&amp;gt;true&amp;lt;/PlainText&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;/Password&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;Description&amp;gt;&amp;lt;/Description&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;DisplayName&amp;gt;Administrator&amp;lt;/DisplayName&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;Group&amp;gt;Administrators&amp;lt;/Group&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&amp;lt;Name&amp;gt;Administrator&amp;lt;/Name&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;/LocalAccount&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/LocalAccounts&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;/UserAccounts&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;RegisteredOrganization&amp;gt;&amp;lt;/RegisteredOrganization&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;RegisteredOwner&amp;gt;Administrator&amp;lt;/RegisteredOwner&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;DisableAutoDaylightTimeSet&amp;gt;false&amp;lt;/DisableAutoDaylightTimeSet&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;FirstLogonCommands&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;SynchronousCommand wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Description&amp;gt;Control Panel View&amp;lt;/Description&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Order&amp;gt;1&amp;lt;/Order&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;CommandLine&amp;gt;reg add &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel&quot; /v StartupPage /t REG_DWORD /d 1 /f&amp;lt;/CommandLine&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;RequiresUserInput&amp;gt;true&amp;lt;/RequiresUserInput&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/SynchronousCommand&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;SynchronousCommand wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Order&amp;gt;2&amp;lt;/Order&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Description&amp;gt;Control Panel Icon Size&amp;lt;/Description&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;RequiresUserInput&amp;gt;false&amp;lt;/RequiresUserInput&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;CommandLine&amp;gt;reg add &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel&quot; /v AllItemsIconView /t REG_DWORD /d 0 /f&amp;lt;/CommandLine&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/SynchronousCommand&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;SynchronousCommand wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Order&amp;gt;3&amp;lt;/Order&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;RequiresUserInput&amp;gt;false&amp;lt;/RequiresUserInput&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;CommandLine&amp;gt;cmd /C wmic useraccount where name=&quot;Administrator&quot; set PasswordExpires=false&amp;lt;/CommandLine&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Description&amp;gt;Password Never Expires&amp;lt;/Description&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/SynchronousCommand&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;SynchronousCommand wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Order&amp;gt;4&amp;lt;/Order&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Description&amp;gt;Remove AutoAdminLogon&amp;lt;/Description&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;RequiresUserInput&amp;gt;false&amp;lt;/RequiresUserInput&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;CommandLine&amp;gt;reg add &quot;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon&quot; /v AutoAdminLogon /t REG_SZ /d 0 /f&amp;lt;/CommandLine&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/SynchronousCommand&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;SynchronousCommand wcm:action=&quot;add&quot;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Order&amp;gt;5&amp;lt;/Order&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;RequiresUserInput&amp;gt;false&amp;lt;/RequiresUserInput&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;CommandLine&amp;gt;cmd /c shutdown /s /f /t 10&amp;lt;/CommandLine&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&amp;lt;Description&amp;gt;Shuts down the system&amp;lt;/Description&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;lt;/SynchronousCommand&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;/FirstLogonCommands&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;lt;TimeZone&amp;gt;Alaskan Standard Time&amp;lt;/TimeZone&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;/unattend&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-the-pipeline&quot;&gt;Creating the Pipeline&lt;/h2&gt;

&lt;p&gt;Let’s create a pipeline which consists of the following tasks.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  create-source-dv --- create-vm-from-manifest --- wait-for-vmi-status --- cleanup-vm
                    |
    create-base-dv --
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create-source-dv&lt;/code&gt; task downloads a Windows source ISO into a PVC called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows-10-source-*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create-base-dv&lt;/code&gt; task creates an empty PVC for new windows installation called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows-10-base-*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create-vm-from-manifest&lt;/code&gt; task creates a VM called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows-installer-*&lt;/code&gt;
from the empty PVC and with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows-10-source-*&lt;/code&gt; PVC attached as a CD-ROM.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wait-for-vmi-status&lt;/code&gt; task waits until the VM shuts down.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cleanup-vm&lt;/code&gt; deletes the installer VM and ISO PVC.&lt;/li&gt;
  &lt;li&gt;The output artifact will be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows-10-base-*&lt;/code&gt; PVC with the Windows installation.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pipeline&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows-installer&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;winImageDownloadURL&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;autounattendConfigMapName&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows-10-autounattend&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-source-dv&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;manifest&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;apiVersion: cdi.kubevirt.io/v1beta1&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;kind: DataVolume&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;metadata:&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;generateName: windows-10-source-&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;spec:&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;pvc:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;accessModes:&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;- ReadWriteOnce&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;resources:&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;requests:&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;storage: 7Gi&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;volumeMode: Filesystem&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;source:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;http:&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;url: $(params.winImageDownloadURL)&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;waitForSuccess&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2h'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;taskRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterTask&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-datavolume-from-manifest&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-base-dv&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;manifest&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;apiVersion: cdi.kubevirt.io/v1beta1&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;kind: DataVolume&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;metadata:&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;generateName: windows-10-base-&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;spec:&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;pvc:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;accessModes:&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;- ReadWriteOnce&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;resources:&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;requests:&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;storage: 20Gi&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;volumeMode: Filesystem&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;source:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;blank: {}&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;waitForSuccess&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;taskRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterTask&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-datavolume-from-manifest&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-vm-from-manifest&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;manifest&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;apiVersion: kubevirt.io/v1alpha3&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;kind: VirtualMachine&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;metadata:&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;generateName: windows-installer-&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;annotation:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;description: Windows VM generated by windows-installer pipeline&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;labels:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;app: windows-installer&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;spec:&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;runStrategy: RerunOnFailure&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;template:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;metadata:&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;labels:&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;kubevirt.io/domain: windows-installer&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;spec:&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;domain:&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;cpu:&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;sockets: 2&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;cores: 1&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;threads: 1&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;resources:&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;requests:&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;memory: 2Gi&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;devices:&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;disks:&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;- name: installcdrom&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;cdrom:&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;bus: sata&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;bootOrder: 1&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;- name: rootdisk&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;bootOrder: 2&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;disk:&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;bus: virtio&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;- name: virtiocontainerdisk&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;cdrom:&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;bus: sata&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;- name: sysprepconfig&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;cdrom:&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;bus: sata&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;interfaces:&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;- bridge: {}&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;name: default&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;inputs:&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;- type: tablet&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;bus: usb&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;name: tablet&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;networks:&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;- name: default&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;pod: {}&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;volumes:&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;- name: installcdrom&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;- name: rootdisk&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;- name: virtiocontainerdisk&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;containerDisk:&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;image: kubevirt/virtio-container-disk&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;- name: sysprepconfig&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;sysprep:&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;configMap:&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;name: $(params.autounattendConfigMapName)&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ownDataVolumes&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;installcdrom:$(tasks.create-source-dv.results.name)&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dataVolumes&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rootdisk:$(tasks.create-base-dv.results.name)&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runAfter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-source-dv&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-base-dv&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;taskRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterTask&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-vm-from-manifest&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wait-for-vmi-status&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vmiName&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$(tasks.create-vm-from-manifest.results.name)&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;successCondition&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;status.phase&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Succeeded&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;failureCondition&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;status.phase&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(Failed,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unknown)&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runAfter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-vm-from-manifest&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2h'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;taskRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterTask&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wait-for-vmi-status&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cleanup-vm&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vmName&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$(tasks.create-vm-from-manifest.results.name)&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;delete&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runAfter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wait-for-vmi-status&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;taskRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterTask&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cleanup-vm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;running-the-pipeline&quot;&gt;Running the Pipeline&lt;/h2&gt;

&lt;p&gt;To run the pipeline we need to create the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PipelineRun&lt;/code&gt; which references our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipeline&lt;/code&gt;. 
Before we do that, we should replace DOWNLOAD_URL with the Windows source URL we obtained earlier.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PipelineRun&lt;/code&gt; also specifies the serviceAccount names for all the steps/tasks and the timeout for the whole &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipeline&lt;/code&gt;.
The timeout should be changed appropriately; for example if you have a slow download connection.
You can also set a timeout for each task in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipeline&lt;/code&gt; definition.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PipelineRun&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;generateName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows-installer-run-&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;winImageDownloadURL&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DOWNLOAD_URL&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pipelineRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows-installer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5h'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;serviceAccountNames&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;taskName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-source-dv&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-datavolume-from-manifest-task&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;taskName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-base-dv&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-datavolume-from-manifest-task&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;taskName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-vm-from-manifest&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create-vm-from-manifest-task&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;taskName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wait-for-vmi-status&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wait-for-vmi-status-task&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;taskName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cleanup-vm&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;serviceAccountName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cleanup-vm-task&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inspecting-the-output&quot;&gt;Inspecting the output&lt;/h2&gt;

&lt;p&gt;Firstly, you can inspect the progress of the windows-10-source and windows-10-base import:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get dvs | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;windows-10-

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; windows-10-base-8zxwr     Succeeded          100.0%                21s
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; windows-10-source-jdv64   ImportInProgress   1.01%                 20s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To inspect the status of the pipeline run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pipelinerun &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tekton.dev/pipeline=windows-installer&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; NAME                          SUCCEEDED   REASON                          STARTTIME   COMPLETIONTIME
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; windows-installer-run-n2mjf   Unknown     Running                         118s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To check the status of each task and its pods:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pipelinerun &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; yaml &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tekton.dev/pipeline=windows-installer&quot;&lt;/span&gt;
kubectl get pods &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tekton.dev/pipeline=windows-installer&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the pipeline run completes, you should be left with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows-10-base-xxxxx&lt;/code&gt; PVC (backed by a DataVolume).
You can then create a new VM with a copy of this PVC to test it.
You need to replace PVC_NAME with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows-10-base-xxxxx&lt;/code&gt; (you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get dvs -o name | grep -o &quot;windows-10-base-.*&quot;&lt;/code&gt;) and PVC_NAMESPACE with the correct namespace in the following YAML.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubevirt.io/v1alpha3&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;VirtualMachine&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows-10-vm&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dataVolumeTemplates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cdi.kubevirt.io/v1beta1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DataVolume&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows-10-vm-root&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;pvc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;accessModes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReadWriteMany&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20Gi&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;pvc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PVC_NAME&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PVC_NAMESPACE&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;kubevirt.io/domain&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows-10-vm&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;sockets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cores&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2Gi&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;disks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rootdisk&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;bootOrder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;disk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;virtio&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;virtiocontainerdisk&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;cdrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sata&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;interfaces&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tablet&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;usb&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tablet&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;pod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rootdisk&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;dataVolume&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows-10-vm-root&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;virtiocontainerdisk&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;containerDisk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubevirt/virtio-container-disk&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can start the VM and login with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Administrator&lt;/code&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changepassword&lt;/code&gt; credentials. Then you should be welcomed by your fresh VM.&lt;/p&gt;

&lt;div class=&quot;zoom&quot;&gt;
  &lt;img src=&quot;/assets/2021-04-21-Automated-Windows-Installation-With-Tekton-Pipelines/win-started.png&quot; width=&quot;100&quot; height=&quot;75&quot; itemprop=&quot;thumbnail&quot; alt=&quot;Started Windows VM&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubevirt/kubevirt-tekton-tasks/tree/main/examples/pipelines/windows-installer&quot;&gt;YAML files used in this example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubevirt/kubevirt-tekton-tasks&quot;&gt;KubeVirt Tekton Tasks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tektoncd/pipeline&quot;&gt;Tekton Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Filip Křepinský</name></author><category term="news" /><category term="kubevirt" /><category term="Kubernetes" /><category term="virtual machine" /><category term="VM" /><category term="Tekton Pipelines" /><category term="KubeVirt Tekton Tasks" /><category term="Windows" /><summary type="html">Introduction</summary></entry><entry><title type="html">KubeVirt v0.40.0</title><link href="https://kubevirt.io//2021/changelog-v0.40.0.html" rel="alternate" type="text/html" title="KubeVirt v0.40.0" /><published>2021-04-19T00:00:00+00:00</published><updated>2021-04-19T00:00:00+00:00</updated><id>https://kubevirt.io//2021/changelog-v0.40.0</id><content type="html" xml:base="https://kubevirt.io//2021/changelog-v0.40.0.html">&lt;h2 id=&quot;v0400&quot;&gt;v0.40.0&lt;/h2&gt;

&lt;p&gt;Released on: Mon Apr 19 12:25:41 2021 +0000&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[PR #5467][rmohr] Fixes upgrades from KubeVirt v0.36&lt;/li&gt;
  &lt;li&gt;[PR #5350][jean-edouard] Removal of entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permittedHostDevices&lt;/code&gt; section will now remove all user-defined host device plugins.&lt;/li&gt;
  &lt;li&gt;[PR #5242][jean-edouard] Creating more than 1 migration at the same time for a given VMI will now fail&lt;/li&gt;
  &lt;li&gt;[PR #4907][vasiliy-ul] Initial cgroupv2 support&lt;/li&gt;
  &lt;li&gt;[PR #5324][jean-edouard] Default feature gates can now be defined in the provider configuration.&lt;/li&gt;
  &lt;li&gt;[PR #5006][alicefr] Add discard=unmap option&lt;/li&gt;
  &lt;li&gt;[PR #5022][davidvossel] Fixes race condition between operator adding service and webhooks that can result in installs/uninstalls failing&lt;/li&gt;
  &lt;li&gt;[PR #5310][ashleyschuett] Reconcile CRD resources&lt;/li&gt;
  &lt;li&gt;[PR #5102][iholder-redhat] Go version updated to 1.14.14&lt;/li&gt;
  &lt;li&gt;[PR #4746][ashleyschuett] Reconcile Deployments, DaemonSets, MutatingWebhookConfigurations and ValidatingWebhookConfigurations&lt;/li&gt;
  &lt;li&gt;[PR #5037][ormergi] Hot-plug SR-IOV VF interfaces to VM’s post a successful migration.&lt;/li&gt;
  &lt;li&gt;[PR #5269][mlsorensen] Prometheus metrics scraped from virt-handler are now served from the VMI informer cache, rather than calling back to the Kubernetes API for VMI information.&lt;/li&gt;
  &lt;li&gt;[PR #5138][davidvossel] virt-handler now waits up to 5 minutes for all migrations on the node to complete before shutting down.&lt;/li&gt;
  &lt;li&gt;[PR #5191][yuvalturg] Added a metric for monitoring CPU affinity&lt;/li&gt;
  &lt;li&gt;[PR #5215][xphyr] Enable detection of Intel GVT-g vGPU.&lt;/li&gt;
  &lt;li&gt;[PR #4760][rmohr] Make virt-handler heartbeat more efficient and robust: Only one combined PATCH and no need to detect different cluster types anymore.&lt;/li&gt;
  &lt;li&gt;[PR #5091][iholder-redhat] QEMU SeaBios debug logs are being seen as part of virt-launcher log.&lt;/li&gt;
  &lt;li&gt;[PR #5221][rmohr] Remove  workload placement validation webhook which blocks placement updates when VMIs are running&lt;/li&gt;
  &lt;li&gt;[PR #5128][yuvalturg] Modified memory related metrics by adding several new metrics and splitting the swap traffic bytes metric&lt;/li&gt;
  &lt;li&gt;[PR #5084][ashleyschuett] Add validation to CustomizeComponents object on the KubeVirt resource&lt;/li&gt;
  &lt;li&gt;[PR #5182][davidvossel] New [release-blocker] functional test marker to signify tests that can never be disabled before making a release&lt;/li&gt;
  &lt;li&gt;[PR #5137][davidvossel] Added our policy around release branch backporting in docs/release-branch-backporting.md&lt;/li&gt;
  &lt;li&gt;[PR #5096][yuvalturg] Modified networking metrics by adding new metrics, splitting existing ones by rx/tx and using the device alias for the interface name when available&lt;/li&gt;
  &lt;li&gt;[PR #5088][awels] Hotplug works with hostpath storage.&lt;/li&gt;
  &lt;li&gt;[PR #4908][dhiller] Move travis tag and master builds to kubevirt prow.&lt;/li&gt;
  &lt;li&gt;[PR #4741][EdDev] Allow live migration for SR-IOV VM/s without preserving the VF interfaces.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kube🤖</name></author><category term="releases" /><category term="release notes" /><category term="changelog" /><summary type="html">v0.40.0</summary></entry><entry><title type="html">KubeVirt v0.39.0</title><link href="https://kubevirt.io//2021/changelog-v0.39.0.html" rel="alternate" type="text/html" title="KubeVirt v0.39.0" /><published>2021-03-10T00:00:00+00:00</published><updated>2021-03-10T00:00:00+00:00</updated><id>https://kubevirt.io//2021/changelog-v0.39.0</id><content type="html" xml:base="https://kubevirt.io//2021/changelog-v0.39.0.html">&lt;h2 id=&quot;v0390&quot;&gt;v0.39.0&lt;/h2&gt;

&lt;p&gt;Released on: Wed Mar 10 14:51:58 2021 +0000&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[PR #5010][jean-edouard] Migrated VMs stay persistent and can therefore survive S3, among other things.&lt;/li&gt;
  &lt;li&gt;[PR #4952][ashleyschuett] Create warning NodeUnresponsive event if a node is running a VMI pod but not a virt-handler pod&lt;/li&gt;
  &lt;li&gt;[PR #4686][davidvossel] Automated workload updates via new KubeVirt WorkloadUpdateStrategy API&lt;/li&gt;
  &lt;li&gt;[PR #4886][awels] Hotplug support for WFFC datavolumes.&lt;/li&gt;
  &lt;li&gt;[PR #5026][AlonaKaplan] virt-launcher, masquerade binding - prefer nft over iptables.&lt;/li&gt;
  &lt;li&gt;[PR #4921][borod108] Added support for Sysprep in the API. A user can now add a answer file through a ConfigMap or a Secret. The User Guide is updated accordingly. /kind feature&lt;/li&gt;
  &lt;li&gt;[PR #4874][ormergi] Add new feature-gate SRIOVLiveMigration,&lt;/li&gt;
  &lt;li&gt;[PR #4917][iholder-redhat] Now it is possible to enable QEMU SeaBios debug logs setting virt-launcher log verbosity to be greater than 5.&lt;/li&gt;
  &lt;li&gt;[PR #4966][arnongilboa] Solve virtctl “Error when closing file … file already closed” that shows after successful image upload&lt;/li&gt;
  &lt;li&gt;[PR #4489][salanki] Fix a bug where a disk.img file was created on filesystems mounted via Virtio-FS&lt;/li&gt;
  &lt;li&gt;[PR #4982][xpivarc] Fixing handling of transient domain&lt;/li&gt;
  &lt;li&gt;[PR #4984][ashleyschuett] Change customizeComponents.patches such that ‘*’ resourceName or resourceType matches all, all fields of a patch (type, patch, resourceName, resourceType) are now required.&lt;/li&gt;
  &lt;li&gt;[PR #4972][vladikr] allow disabling pvspinlock to support older guest kernels&lt;/li&gt;
  &lt;li&gt;[PR #4927][yuhaohaoyu] Fix of XML and JSON marshalling/unmarshalling for user defined device alias names which can make migrations fail.&lt;/li&gt;
  &lt;li&gt;[PR #4552][rthallisey] VMs using bridged networking will survive a kubelet restart by having kubevirt create a dummy interface on the virt-launcher pods, so that some Kubernetes CNIs, that have implemented the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CHECK&lt;/code&gt; RPC call, will not cause VMI pods to enter a failed state.&lt;/li&gt;
  &lt;li&gt;[PR #4883][iholder-redhat] Bug fixed: Enabling libvirt debug logs only if debugLogs label value is “true”, disabling otherwise.&lt;/li&gt;
  &lt;li&gt;[PR #4840][alicefr] Generate k8s events on IO errors&lt;/li&gt;
  &lt;li&gt;[PR #4940][vladikr] permittedHostDevices will support both upper and lowercase letters in the device ID&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kube🤖</name></author><category term="releases" /><category term="release notes" /><category term="changelog" /><summary type="html">v0.39.0</summary></entry><entry><title type="html">The KubeVirt Summit 2021 is a wrap!</title><link href="https://kubevirt.io//2021/KubeVirt-Summit-Wrap-Up.html" rel="alternate" type="text/html" title="The KubeVirt Summit 2021 is a wrap!" /><published>2021-03-03T00:00:00+00:00</published><updated>2021-03-03T00:00:00+00:00</updated><id>https://kubevirt.io//2021/KubeVirt-Summit-Wrap-Up</id><content type="html" xml:base="https://kubevirt.io//2021/KubeVirt-Summit-Wrap-Up.html">&lt;p&gt;Just a few weeks ago, the KubeVirt community had their first ever dedicated
online event, the &lt;a href=&quot;/summit/&quot;&gt;KubeVirt Summit&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;We are very happy to have had this opportunity to meet so many community
members, hear from users, vendors and contributors, and learn so many things
about KubeVirt.&lt;/p&gt;

&lt;p&gt;If you missed the event, or if you were there and want to remember the great
time we had, the &lt;a href=&quot;https://youtube.com/playlist?list=PLnLpXX8KHIYyQi7Phsf5-73r5fj1AOBox&quot;&gt;session recordings&lt;/a&gt;
are available in the &lt;a href=&quot;https://www.youtube.com/c/KubeVirt&quot;&gt;KubeVirt YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The landing page about the &lt;a href=&quot;/summit/&quot;&gt;KubeVirt Summit&lt;/a&gt;
contains a detailed list of all the sessions, with information about the
contents, presenters, and direct links to each session recording and slides
(where available).&lt;/p&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks!&lt;/h2&gt;

&lt;p&gt;We would like to thank everyone who contributed to make this event happen: all
the presenters / session leads, everyone who proposed a session, the various
community members who contributed to the organization, all the attendees, and
the &lt;a href=&quot;https://cncf.io/&quot;&gt;Container-native Computing Foundation&lt;/a&gt; who sponsored the
event.&lt;/p&gt;

&lt;h2 id=&quot;i-want-more&quot;&gt;I want more!&lt;/h2&gt;

&lt;p&gt;We are just wrapping up this first edition. Based on this experience, we really
hope to have more community events of this type in the future, but it is still a
bit early to say when/where how.&lt;/p&gt;

&lt;p&gt;For now, please keep the conversations going through the various community channels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;https://groups.google.com/forum/#!forum/kubevirt-dev&quot;&gt;mailing list&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://kubernetes.slack.com/archives/C8ED7RKFE&quot;&gt;#virtualization Slack channel&lt;/a&gt; in &lt;a href=&quot;https://slack.k8s.io/&quot;&gt;Kubernetes Slack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our &lt;a href=&quot;https://calendar.google.com/calendar/embed?src=18pc0jur01k8f2cccvn5j04j1g%40group.calendar.google.com&amp;amp;ctz=Etc%2FGMT&quot;&gt;community meetings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/kubevirt&quot;&gt;github repositories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/kubevirt&quot;&gt;@kubevirt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Pep Turró Mauri</name></author><category term="news" /><category term="kubevirt" /><category term="event" /><category term="community" /><summary type="html">Just a few weeks ago, the KubeVirt community had their first ever dedicated online event, the KubeVirt Summit!</summary></entry><entry><title type="html">KubeVirt v0.38.0</title><link href="https://kubevirt.io//2021/changelog-v0.38.0.html" rel="alternate" type="text/html" title="KubeVirt v0.38.0" /><published>2021-02-08T00:00:00+00:00</published><updated>2021-02-08T00:00:00+00:00</updated><id>https://kubevirt.io//2021/changelog-v0.38.0</id><content type="html" xml:base="https://kubevirt.io//2021/changelog-v0.38.0.html">&lt;h2 id=&quot;v0380&quot;&gt;v0.38.0&lt;/h2&gt;

&lt;p&gt;Released on: Mon Feb 8 13:15:32 2021 +0000&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[PR #4870][qinqon] Bump k8s deps to 0.20.2&lt;/li&gt;
  &lt;li&gt;[PR #4571][yuvalturg] Added os, workflow and flavor labels to the kubevirt_vmi_phase_count metric&lt;/li&gt;
  &lt;li&gt;[PR #4659][salanki] Fixed an issue where non-root users inside a guest could not write to a Virtio-FS mount.&lt;/li&gt;
  &lt;li&gt;[PR #4844][xpivarc] Fixed limits/requests to accept int again&lt;/li&gt;
  &lt;li&gt;[PR #4850][rmohr] virtio-scsi now respects the useTransitionalVirtio flag instead of assigning a virtio version depending on the machine layout&lt;/li&gt;
  &lt;li&gt;[PR #4672][vladikr] allow increasing logging verbosity of infra components in KubeVirt CR&lt;/li&gt;
  &lt;li&gt;[PR #4838][rmohr] Fix an issue where it may not be able to update the KubeVirt CR after creation for up to minutes due to certificate propagation delays&lt;/li&gt;
  &lt;li&gt;[PR #4806][rmohr] Make the mutating webhooks for VMIs and VMs  required to avoid letting entities into the cluster which are not properly defaulted&lt;/li&gt;
  &lt;li&gt;[PR #4779][brybacki] Error messsge on virtctl image-upload to WaitForFirstConsumer DV&lt;/li&gt;
  &lt;li&gt;[PR #4749][davidvossel] KUBEVIRT_CLIENT_GO_SCHEME_REGISTRATION_VERSION env var for specifying exactly what client-go scheme version is registered&lt;/li&gt;
  &lt;li&gt;[PR #4772][jean-edouard] Faster VMI phase transitions thanks to an increased number of VMI watch threads in virt-controller&lt;/li&gt;
  &lt;li&gt;[PR #4730][rmohr] Add spec.domain.devices.useVirtioTransitional boolean to support virtio-transitional for old guests&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kube🤖</name></author><category term="releases" /><category term="release notes" /><category term="changelog" /><summary type="html">v0.38.0</summary></entry><entry><title type="html">KubeVirt v0.37.0</title><link href="https://kubevirt.io//2021/changelog-v0.37.0.html" rel="alternate" type="text/html" title="KubeVirt v0.37.0" /><published>2021-01-18T00:00:00+00:00</published><updated>2021-01-18T00:00:00+00:00</updated><id>https://kubevirt.io//2021/changelog-v0.37.0</id><content type="html" xml:base="https://kubevirt.io//2021/changelog-v0.37.0.html">&lt;h2 id=&quot;v0370&quot;&gt;v0.37.0&lt;/h2&gt;

&lt;p&gt;Released on: Mon Jan 18 17:57:03 2021 +0000&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[PR #4654][AlonaKaplan] Introduce virt-launcher DHCPv6 server.&lt;/li&gt;
  &lt;li&gt;[PR #4669][kwiesmueller] Add nodeSelector to kubevirt components restricting them to run on linux nodes only.&lt;/li&gt;
  &lt;li&gt;[PR #4648][davidvossel] Update libvirt base container to be based of packages in rhel-av 8.3&lt;/li&gt;
  &lt;li&gt;[PR #4653][qinqon] Allow configure cloud-init with networkData only.&lt;/li&gt;
  &lt;li&gt;[PR #4644][ashleyschuett] Operator validation webhook will deny updates to the workloads object of the KubeVirt CR if there are running VMIs&lt;/li&gt;
  &lt;li&gt;[PR #3349][davidvossel] KubeVirt v1 GA api&lt;/li&gt;
  &lt;li&gt;[PR #4645][maiqueb] Re-introduce the CAP_NET_ADMIN, to allow migration of VMs already having it.&lt;/li&gt;
  &lt;li&gt;[PR #4546][yuhaohaoyu] Failure detection and handling for VM with EFI Insecure Boot in KubeVirt environments where EFI Insecure Boot is not supported by design.&lt;/li&gt;
  &lt;li&gt;[PR #4625][awels] virtctl upload now shows error when specifying access mode of ReadOnlyMany&lt;/li&gt;
  &lt;li&gt;[PR #4396][xpivarc] KubeVirt is now explainable!&lt;/li&gt;
  &lt;li&gt;[PR #4517][danielBelenky] Fix guest agent reporting.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kube🤖</name></author><category term="releases" /><category term="release notes" /><category term="changelog" /><summary type="html">v0.37.0</summary></entry><entry><title type="html">KubeVirt Summit is coming!</title><link href="https://kubevirt.io//2021/KubeVirt-Summit-announce.html" rel="alternate" type="text/html" title="KubeVirt Summit is coming!" /><published>2021-01-12T00:00:00+00:00</published><updated>2021-01-12T00:00:00+00:00</updated><id>https://kubevirt.io//2021/KubeVirt-Summit-announce</id><content type="html" xml:base="https://kubevirt.io//2021/KubeVirt-Summit-announce.html">&lt;p&gt;Exciting news! The KubeVirt community are in the process of planning the first ever &lt;strong&gt;KubeVirt Summit&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;save-the-dates&quot;&gt;Save the dates!&lt;/h2&gt;

&lt;p&gt;The event will take place online during two half-days:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dates: February 9 and 10, 2021.&lt;/li&gt;
  &lt;li&gt;Time: 15:00 – 19:00 UTC (10:00–14:00 EST, 16:00–20:00 CET)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;proposing-topics&quot;&gt;Proposing topics&lt;/h2&gt;

&lt;p&gt;We want to encourage anyone who is interested in presenting to submit a topic to
our community repo
&lt;a href=&quot;https://github.com/kubevirt/community/tree/master/events/2021-kubevirt-summit/proposals&quot;&gt;here&lt;/a&gt;. Simply
copy the
&lt;a href=&quot;https://github.com/kubevirt/community/blob/master/events/2021-kubevirt-summit/proposals/proposal-template.md&quot;&gt;template&lt;/a&gt; in that repo directory as a new file, fill in the details pertaining to your
session, and submit your proposal as a Pull Request.&lt;/p&gt;

&lt;h2 id=&quot;keep-up-to-date&quot;&gt;Keep up to date&lt;/h2&gt;

&lt;p&gt;The event has a landing page &lt;a href=&quot;/summit/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More details will be shared as they become available, here in the website and also on our &lt;a href=&quot;https://groups.google.com/forum/#!forum/kubevirt-dev&quot;&gt;mailing list&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/kubevirt&quot;&gt;twitter&lt;/a&gt; and our &lt;a href=&quot;https://calendar.google.com/calendar/embed?src=18pc0jur01k8f2cccvn5j04j1g%40group.calendar.google.com&amp;amp;ctz=Etc%2FGMT&quot;&gt;weekly community meetings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reach out through any of these channels to get involved.&lt;/p&gt;

&lt;p&gt;Looking forward to meeting you there!&lt;/p&gt;</content><author><name>Pep Turró Mauri</name></author><category term="news" /><category term="kubevirt" /><category term="event" /><category term="community" /><summary type="html">Exciting news! The KubeVirt community are in the process of planning the first ever KubeVirt Summit!</summary></entry><entry><title type="html">KubeVirt v0.36.0</title><link href="https://kubevirt.io//2020/changelog-v0.36.0.html" rel="alternate" type="text/html" title="KubeVirt v0.36.0" /><published>2020-12-16T00:00:00+00:00</published><updated>2020-12-16T00:00:00+00:00</updated><id>https://kubevirt.io//2020/changelog-v0.36.0</id><content type="html" xml:base="https://kubevirt.io//2020/changelog-v0.36.0.html">&lt;h2 id=&quot;v0360&quot;&gt;v0.36.0&lt;/h2&gt;

&lt;p&gt;Released on: Wed Dec 16 14:30:37 2020 +0000&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[PR #4667][kubevirt-bot] Update libvirt base container to be based of packages in rhel-av 8.3&lt;/li&gt;
  &lt;li&gt;[PR #4634][kubevirt-bot] Failure detection and handling for VM with EFI Insecure Boot in KubeVirt environments where EFI Insecure Boot is not supported by design.&lt;/li&gt;
  &lt;li&gt;[PR #4647][kubevirt-bot] Re-introduce the CAP_NET_ADMIN, to allow migration of VMs already having it.&lt;/li&gt;
  &lt;li&gt;[PR #4627][kubevirt-bot] Fix guest agent reporting.&lt;/li&gt;
  &lt;li&gt;[PR #4458][awels] It is now possible to hotplug DataVolume and PVC volumes into a running Virtual Machine.&lt;/li&gt;
  &lt;li&gt;[PR #4025][brybacki] Adds a special handling for DataVolumes in WaitForFirstConsumer state to support CDI’s delayed binding mode.&lt;/li&gt;
  &lt;li&gt;[PR #4217][mfranczy] Set only an IP address for interfaces reported by qemu-guest-agent. Previously that was CIDR.&lt;/li&gt;
  &lt;li&gt;[PR #4195][davidvossel] AccessCredentials API for dynamic user/password and ssh public key injection&lt;/li&gt;
  &lt;li&gt;[PR #4335][oshoval] VMI status displays SRIOV interfaces with their network name only when they have originally&lt;/li&gt;
  &lt;li&gt;[PR #4408][andreabolognani] This version of KubeVirt includes upgraded virtualization technology based on libvirt 6.6.0 and QEMU 5.1.0.&lt;/li&gt;
  &lt;li&gt;[PR #4514][ArthurSens] &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain&lt;/code&gt; label removed from metric &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubevirt_vmi_memory_unused_bytes&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;[PR #4542][danielBelenky] Fix double migration on node evacuation&lt;/li&gt;
  &lt;li&gt;[PR #4506][maiqueb] Remove CAP_NET_ADMIN from the virt-launcher pod.&lt;/li&gt;
  &lt;li&gt;[PR #4501][AlonaKaplan] CAP_NET_RAW removed from virt-launcher.&lt;/li&gt;
  &lt;li&gt;[PR #4488][salanki] Disable Virtio-FS metadata cache to prevent OOM conditions on the host.&lt;/li&gt;
  &lt;li&gt;[PR #3937][vladikr] Generalize host devices assignment. Provides an interface between kubevirt and external device plugins. Provides a mechanism for whitelisting host devices.&lt;/li&gt;
  &lt;li&gt;[PR #4443][rmohr] All kubevirt webhooks support now dry-runs.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kube🤖</name></author><category term="releases" /><category term="release notes" /><category term="changelog" /><summary type="html">v0.36.0</summary></entry><entry><title type="html">Customizing images for containerized VMs part I</title><link href="https://kubevirt.io//2020/Customizing-images-for-containerized-vms.html" rel="alternate" type="text/html" title="Customizing images for containerized VMs part I" /><published>2020-12-10T00:00:00+00:00</published><updated>2020-12-10T00:00:00+00:00</updated><id>https://kubevirt.io//2020/Customizing-images-for-containerized-vms</id><content type="html" xml:base="https://kubevirt.io//2020/Customizing-images-for-containerized-vms.html">&lt;p&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/p&gt;

&lt;!-- TOC depthFrom:2 insertAnchor:false orderedList:false updateOnSave:true withLinks:true --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-vision&quot;&gt;The vision&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#preparation-of-the-environment&quot;&gt;Preparation of the environment&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#configuration-of-the-builder-image-server&quot;&gt;Configuration of the Builder image server&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-standard-centos-8-image&quot;&gt;Building standard CentOS 8 image&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#image-creation-with-builder-tool&quot;&gt;Image creation with Builder Tool&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#verify-the-custom-built-image&quot;&gt;Verify the custom-built image&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#image-tailoring-with-virt-customize&quot;&gt;Image tailoring with virt-customize&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-a-standard-centos-7-image-from-cloud-images&quot;&gt;Building a standard CentOS 7 image from cloud images&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#image-creation-with-virt-customize&quot;&gt;Image creation with virt-customize&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;The content of this article has been divided into two: this one, which is the first part, explains how to create a golden image using different tools such as &lt;em&gt;Builder Tool&lt;/em&gt; and &lt;em&gt;virt-customize&lt;/em&gt;. Once the custom-built image is ready, it is containerized so that it can be uploaded and stored into a container registry. The second part deals with the different ways the developers can deploy, modify and connect to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualMachineInstance&lt;/code&gt; running in the OKD Kubernetes cluster.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-vision&quot;&gt;The vision&lt;/h2&gt;

&lt;p&gt;If you work for a software factory, some kind of development environment standardization is probably in place. There are a lot of approaches which fit different use cases. In this blog post, our example company has allowed developers to choose their preferred editing tools and debugging environment locally to their workstations. However, before committing their changes to a Git repository, they need to validate them in a specifically tailored environment. This environment, due to legal restrictions, contains exact versions of the libraries, databases, web server or any other software previously agreed with customers.&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;Aside from the pre-commit environments, the company already has an automated continuous integration workflow composed by several shared environments: &lt;em&gt;development, integration and production&lt;/em&gt;.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This blog post focuses on showing a use case where containerized VMs running on top of Kubernetes ease the deployment and creation of standardized VMs to our developers. These VMs are meant to be ephemeral. However, if necessary, additional non-persistent disk or shared persistent storage can be attached so that important information can be kept safe.&lt;/p&gt;

&lt;p&gt;Along the process, different approaches and tools to create custom VM images that will be stored in a corporate registry are detailed. Containerizing VMs means adapting them so that they can be saved in a container registry. Being able to manage VMs as container images leverages the benefits of a container registry, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The registry becomes a &lt;strong&gt;source of truth&lt;/strong&gt; for the VMs you want to run. Everybody can list all VMs available searching on a centralized point.&lt;/li&gt;
  &lt;li&gt;The container registry, depending on the storage size, contains historical information of all the VMs, which might have multiple different versions, identified by their tags. Any developer with the proper permissions is able to run any specific version of your standardized VM.&lt;/li&gt;
  &lt;li&gt;It is the unique point where all your VMs are stored avoiding having them spread all over your infrastructure.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;A container image registry is a service that stores container images, and is hosted either by a third-party or as a public/private registry such as Docker Hub, Quay, and so on.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The ambitious goal is allowing the developers to deploy standardized VMs on the current Kubernetes infrastructure. Then, execute the required tests and if they are good, push the code to the corporate Git repositories and delete the VM eventually.&lt;/p&gt;

&lt;p&gt;This goal is divided into three main procedures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create custom standardized VM images, also known as golden images.&lt;/li&gt;
  &lt;li&gt;Containerize the resulting golden VM images.&lt;/li&gt;
  &lt;li&gt;Deploy the proper VM images from the corporate registry into the OKD Kubernetes cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;preparation-of-the-environment&quot;&gt;Preparation of the environment&lt;/h2&gt;

&lt;p&gt;Running containerized VMs in KubeVirt uses the &lt;a href=&quot;https://kubevirt.io/user-guide/virtual_machines/disks_and_volumes/#containerdisk&quot;&gt;containerDisk&lt;/a&gt; feature which provides the ability to store and distributed VM disks in the container image registry. The disks are pulled from the container registry and reside on the local node hosting the VMs that consume the disks.&lt;/p&gt;

&lt;p&gt;The company already have an &lt;a href=&quot;https://www.okd.io/&quot;&gt;OKD 4 Kubernetes cluster&lt;/a&gt; installed which provides out of the box a container registry and some required security features such as &lt;em&gt;Role Based Access Controls (RBAC)&lt;/em&gt; and &lt;em&gt;Security Context Constraints (SCC)&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;In the &lt;a href=&quot;https://blog.openshift.com/&quot;&gt;OpenShift blog&lt;/a&gt; there is a post called &lt;a href=&quot;https://blog.openshift.com/enterprise-kubernetes-with-openshift-part-one/&quot;&gt;Enterprise Kubernetes with OpenShift&lt;/a&gt; where you can find valuable information between the similarities and differences between OKD and Kubernetes.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On top of the OKD cluster, KubeVirt is required so that we can run our virtual machines. The installation process is pretty well detailed in the &lt;a href=&quot;https://kubevirt.io/pages/cloud.html&quot;&gt;KubeVirt’s documentation&lt;/a&gt;. Below it is shown how KubeVirt components can be seen from the OKD web console.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;KubeVirt version deployed is &lt;strong&gt;0.34.2&lt;/strong&gt; which is the latest at the moment of writing.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KUBEVIRT_VERSION&lt;/span&gt;
0.34.2

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://github.com/kubevirt/kubevirt/releases/download/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBEVIRT_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/kubevirt-operator.yaml
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://github.com/kubevirt/kubevirt/releases/download/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBEVIRT_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/kubevirt-cr.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/kubevirt_okd.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x520&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/kubevirt_okd.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;&lt;strong&gt;oc&lt;/strong&gt; is the specific command-line tool for OKD, however, it is based in &lt;em&gt;kubectl&lt;/em&gt; plus some additional features detailed here. It is probably that along the blog post, you can find executions with &lt;em&gt;oc&lt;/em&gt; or &lt;em&gt;kubectl&lt;/em&gt; interchangeably.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerDisks&lt;/code&gt; are created from RAW or &lt;a href=&quot;https://www.linux-kvm.org/page/Qcow2&quot;&gt;QCOW2&lt;/a&gt; virtual machine images. Nevertheless, virtual machine images with all the agreed software and proper configuration must be created previously. The company currently uses CentOS 7 as their approved base operating system to run their applications. However, during the last months, it has been encouraging to move to the recently released version 8 of CentOS.&lt;/p&gt;

&lt;p&gt;From a long time they had been using the prebuilt &lt;a href=&quot;https://cloud.centos.org/centos/&quot;&gt;CentOS cloud images&lt;/a&gt; with &lt;a href=&quot;http://libguestfs.org/virt-customize.1.html&quot;&gt;virt-customize&lt;/a&gt;, which allowed them to modify the prebuilt cloud images. As a trade-off, they had to trust on the cloud image provided by CentOS or verify if new packages were added on each release.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;&lt;strong&gt;virt-customize&lt;/strong&gt; can customize a virtual machine (disk image) by installing packages, editing configuration files, and so on. Virt-customize modifies the guest or disk image in place.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, they are starting to use a new tool called &lt;a href=&quot;https://docs.centos.org/en-US/centos/install-guide/Composer/&quot;&gt;Image Builder&lt;/a&gt; that creates deployment-ready customized system images from scratch. Furthermore, there is an integration with Cockpit where you can create custom CentOS images in various formats including QCOW2 for OpenStack, AMI (Amazon Machine Image), VHD (Azure Disk Image) etc. from a friendly user interface.&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;There are a lot of tools that can accomplish the objective of creating custom images. Here we are focusing on two: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virt-customize&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image Builder&lt;/code&gt;.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Along this blog post, both tools are used together in the image building process, leveraging their strengths. In the following diagram is depicted the different agents that take part in the process of running our standardized VMs in Kubernetes. This workflow includes the creation and customization of the images, their containerization, storing them into the OKD container registry and finally the creation of the VMs in Kubernetes by the employees.&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/diagram-customizing-images.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x320&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/diagram-customizing-images.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;okd imageStream devstation&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configuration-of-the-builder-image-server&quot;&gt;Configuration of the Builder image server&lt;/h3&gt;

&lt;p&gt;In order to prepare the building environment, it is recommended to install Image Builder in a dedicated server as it has specific security requirements. Actually, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lorax-composer&lt;/code&gt; which is one of its components doesn’t work properly with SELinux running, as it installs an entire OS image in an alternate directory.&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;As shown in the &lt;a href=&quot;https://weldr.io/Running-Composer-on-RHEL/&quot;&gt;lorax-composer documentation&lt;/a&gt; SELinux must be disabled. However, I have been able to create custom images successfully with SELinux enabled. In case you find any problems during your building, check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lorax-composer&lt;/code&gt; logs in journal in order to get more detailed information.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here it is a table where the software required to run the builds along with the versions have been used.&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;Operating System is &lt;strong&gt;CentOS 8&lt;/strong&gt; since CentOS 7 Image Builder is still an &lt;a href=&quot;https://docs.centos.org/en-US/centos/install-guide/Composer/&quot;&gt;experimental feature&lt;/a&gt;&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Component&lt;/th&gt;
      &lt;th&gt;Version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Operating System&lt;/td&gt;
      &lt;td&gt;CentOS Linux release 8.2.2004 (Core)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Libvirt&lt;/td&gt;
      &lt;td&gt;libvirtd (libvirt) 4.5.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;virt-customize&lt;/td&gt;
      &lt;td&gt;virt-customize 1.38.4rhel=8,release=14.module_el8.1.0+248+298dec18,libvirt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image Builder&lt;/td&gt;
      &lt;td&gt;lorax-composer (28.14.42-2), composer-cli (composer-cli-28.14.42-2), cockpit-composer (cockpit-composer-12.1-1.el8.noarch)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Once the builder image server is provisioned with latest CentOS 8, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Virtualization Host&lt;/code&gt; group package is installed. It will be required to test our customized images locally before containerizing and pushing them to the OKD registry.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum groupinstall &lt;span class=&quot;s2&quot;&gt;&quot;Virtualization Host&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;libvirtd &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Next, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virt-customize&lt;/code&gt; is installed from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libguestfs-tools&lt;/code&gt; package along with the Image Builder. The latest is composed by lorax-composer, the Cockpit composer plugin and the composer-cli, which will be used to interact directly with Composer using command-line.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dnf &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; libguestfs-tools lorax-composer composer-cli cockpit-composer
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;lorax-composer.socket
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;lorax-composer &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl start cockpit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then, the local firewall is configured so that we can connect to the Cockpit web user interface from our workstation.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--add-service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cockpit &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; firewall-cmd &lt;span class=&quot;nt&quot;&gt;--add-service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cockpit &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Finally, connect to the Cockpit user interface by typing the IP or name of the Builder image server and port &lt;em&gt;TCP/9090&lt;/em&gt; (Cockpit’s default) in your favourite web browser. Then, log in with a local administrator account.&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/cockpit-gui.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x484&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/cockpit-gui.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The following image shows the Image Build plugin web page. Actually, what it is depicted are the different Image Build blueprints that are shipped by default. &lt;em&gt;The blueprint&lt;/em&gt; defines what should be included in your image. This includes packages, users, files, server settings …&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/cockpit-first-page.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x333&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/cockpit-first-page.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;premonition error&quot;&gt;&lt;div class=&quot;fa fa-exclamation-triangle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Error&lt;/p&gt;&lt;p&gt;If Cockpit’s web UI is not working, take a look at the output of the lorax service with the command:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;journalctl &lt;span class=&quot;nt&quot;&gt;-fu&lt;/span&gt; lorax-composer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;building-standard-centos-8-image&quot;&gt;Building standard CentOS 8 image&lt;/h2&gt;

&lt;p&gt;It is time to create our standardized CentOS 8 image or also called golden CentOS 8 image. This image will be built from the ground up using the Image Builder tool.&lt;/p&gt;

&lt;h3 id=&quot;image-creation-with-builder-tool&quot;&gt;Image creation with Builder Tool&lt;/h3&gt;

&lt;p&gt;The easiest way to start is creating a new blueprint (devstation-centos8) from the Cockpit user interface. This will produce a scaffold file where all the required modifications can be made. Here it is shown the process of creation a new blueprint from Cockpit:&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/create_blueprint.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x449&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/create_blueprint.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I would also suggest adding some users and all the packages you want to install from the user interface. In our case, we are going to create the following users by clicking on the details tab of the new blueprint. In both cases, the password is known by the respective group of users and also belongs to the wheel group.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Users&lt;/th&gt;
      &lt;th&gt;Note&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;sysadmin&lt;/td&gt;
      &lt;td&gt;Privileged user owned by the Systems Engineering team to troubleshoot and have access to the VM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;developer&lt;/td&gt;
      &lt;td&gt;These are the credentials used by the developers to access the VM&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/users.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x380&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/users.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Next, select the packages to include. Add the proper version of the package already agreed with the customer.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Package&lt;/th&gt;
      &lt;th&gt;Version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;httpd&lt;/td&gt;
      &lt;td&gt;2.4.37&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mod_ssl&lt;/td&gt;
      &lt;td&gt;2.4.37&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;php&lt;/td&gt;
      &lt;td&gt;7.2.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mariadb-server&lt;/td&gt;
      &lt;td&gt;10.3.17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;openssh-server&lt;/td&gt;
      &lt;td&gt;latest&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;At this point, you already have a blueprint template to start working. In addition to using the web console, you can also use the &lt;strong&gt;Image Builder CLI&lt;/strong&gt; to create images. When using the CLI, you have access to a few more customization options, such as managing firewall rules or download files from Git. Since we already have installed the composer-cli package in the &lt;a href=&quot;#configuration-of-the-builder-image-server&quot;&gt;Image Builder server&lt;/a&gt;, let’s use it to further customize our golden image.&lt;/p&gt;

&lt;p&gt;First, access to the Builder Image server and download the custom blueprint called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devstation-centos8&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli blueprints list
devstation-centos8
example-atlas
example-development
Example-http-server

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli blueprints save devstation-centos8
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;devstation-centos8.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;All composer-cli options are documented in the &lt;a href=&quot;https://weldr.io/lorax/composer-cli.html&quot;&gt;official webpage&lt;/a&gt;. Take a look if you need further detail.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, let’s edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devstation-centos8.toml&lt;/code&gt; file which is in charge of building our custom image.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The time zone has been added to match Europe/Madrid with proper NTP servers.&lt;/li&gt;
  &lt;li&gt;The kernel has been modified to allow connection via console.&lt;/li&gt;
  &lt;li&gt;Several firewall rules have been added to allow our services being accessed from outside.&lt;/li&gt;
  &lt;li&gt;Some services have been configured so that they are enabled and started at boot.&lt;/li&gt;
  &lt;li&gt;A Git repository has been configured to be cloned. Actually, it is a Git repository that contains a manual detailing how the custom image is configured and how it must be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;It is important to add console as a kernel option since the Builder Image tool disables access to serial console by default. It will allow the &lt;em&gt;virtctl&lt;/em&gt; command to connect to the VM while it is booting in our OKD Kubernetes cluster.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is the final building configuration file, it can be downloaded from &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/devstation-centos8.toml&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;devstation-centos8&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A developer station&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;modules&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[packages]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;httpd&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.4.37&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[packages]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mod_ssl&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.4.37&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[packages]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;php&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;7.2.24&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[packages]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mariadb-server&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.3.17&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[packages]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;openssh-server&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[customizations]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;devstation&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[customizations.kernel]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;console=tty0 console=ttyS0,19200n81&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[customizations.timezone]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;timezone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Europe/Madrid&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ntpservers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.europe.pool.ntp.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.europe.pool.ntp.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[customizations.user]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sysadmin&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Company Systems Admin&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$6$ZGmDxvGu3Q0M4RO/$KkfU0bD32FrLNpUCWEL8sy3dknJVyqExoy.NJMOcSCRjpt1H6sFKFjx8mFWn8H5CWTP7.bibPLBrRSRq3MrDb.&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/home/sysadmin/&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/bash&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wheel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[customizations.user]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;developer&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;developer&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;wheel&quot;]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$6$wlIgNacMnqCcXn3o$mPpw0apT4iZ3jDq0q6epXN3xCmNN.oVGFW.Gvu9r0nDVX.FXY3iCwfFkfPEcmhj7Kxw4Ppoes2LsUzPtNRjez0&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[customizations.services]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;httpd&quot;,&quot;mariadb&quot;,&quot;sshd&quot;]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[customizations.firewall.services]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;http&quot;,&quot;https&quot;,&quot;mysql&quot;,&quot;ssh&quot;]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[repos.git]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;rpmname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manual&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;rpmversion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;rpmrelease&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Manual how to work with devstation&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://github.com/alosadagrande/lorax&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;master&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/var/www/html/manual&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;In this case, we are using a Git repository to download useful information on how to deal with the customized image. However, it is possible to download for instance code or other information that can be stored in Git. And what is most important, it is versioned.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once edited, push the configuration to Image Builder and start the building process by selecting the blueprint and the output format. Builder Image tool can export the same blueprint into multiple output formats. Thus, one blueprint might create the same custom image running on multiple providers (qcow2 in our case).&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli blueprints push devstation-centos8.toml

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli compose start devstation-centos8 qcow2
Compose 248161f5-0870-41e8-b871-001348395ca7 added to the queue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;It is possible to verify that the modified blueprint has been pushed successfully by executing the show command.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli blueprints show devstation-centos8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The building process can take tens of minutes. It is possible to see the process by checking the lorax-composer logs in the journal or request the status of the blueprint built from the composer-cli:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli compose status
248161f5-0870-41e8-b871-001348395ca7 RUNNING  Fri Nov 27 15:12:09 2020 devstation-centos8 0.0.2 qcow2

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;journalctl &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; lorax-composer &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
Nov 27 15:13:31 eko3.cloud.lab.eng.bos.redhat.com lorax-composer[38218]: 2020-11-27 15:13:31,715: Installing.
Nov 27 15:13:31 eko3.cloud.lab.eng.bos.redhat.com lorax-composer[38218]: 2020-11-27 15:13:31,716: Starting package installation process
Nov 27 15:13:31 eko3.cloud.lab.eng.bos.redhat.com lorax-composer[38218]: 2020-11-27 15:13:31,716: Downloading packages
Nov 27 15:13:31 eko3.cloud.lab.eng.bos.redhat.com lorax-composer[38218]: 2020-11-27 15:13:31,716: Downloading 474 RPMs, 3.75 MiB / 396.83 MiB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Nov 27 15:13:31 eko3.cloud.lab.eng.bos.redhat.com lorax-composer[38218]: 2020-11-27 15:13:31,716: Downloading 474 RPMs, 15.58 MiB / 396.83 MiB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the building process is finished, it is time to download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QCOW2&lt;/code&gt; file. It can be downloaded from Cockpit UI or from the composer-cli:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli compose image 248161f5-0870-41e8-b871-001348395ca7
248161f5-0870-41e8-b871-001348395ca7-disk.qcow2: 1854.31 MB

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lhrt&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  1 root root 1.5K Nov 27 15:11 devstation-centos8.toml
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  1 root root 1.9G Nov 27 15:26 248161f5-0870-41e8-b871-001348395ca7-disk.qcow2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afterwards, the image is suggested to be renamed to something more meaningful. Below the information given by qemu is exhibited:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;248161f5-0870-41e8-b871-001348395ca7-disk.qcow2  golden-devstation-centos8-disk.qcow2

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img info golden-devstation-centos8-disk.qcow2
image: golden-devstation-centos8-disk.qcow2
file format: qcow2
virtual size: 4.3G &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4566548480 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
disk size: 1.8G
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: &lt;span class=&quot;nb&quot;&gt;false
    &lt;/span&gt;refcount bits: 16
    corrupt: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;Virtual size of the image is 4.3G, since we agreed 10G the disk must be resized and root filesystem expanded before being containerized. Currently, there is no way to specify disk capacity in containerDisk as it can be done with &lt;a href=&quot;https://github.com/kubevirt/kubevirt/blob/master/docs/container-empty-disks.md#implementation&quot;&gt;emptyDisks&lt;/a&gt;. The size of the root filesystem and disk when running in KubeVirt is driven by the image.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;It is recommended to save the QCOW2 images under /var/lib/libvirt/images/ so that qemu user have permissions to expand or resize them.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img resize golden-devstation-centos8-disk.qcow2 10G
Image resized.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The expansion is executed on the root partition, which in case of our golden image is &lt;strong&gt;/dev/sda2&lt;/strong&gt; partition. It must be checked previously, for instance using the &lt;em&gt;virt-filesystems&lt;/em&gt; utility:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-filesystems &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--long&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; golden-devstation-centos8-disk.qcow2
Name       Type       MBR  Size        Parent
/dev/sda1  partition  83   1073741824  /dev/sda
/dev/sda2  partition  83   2966421504  /dev/sda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that a &lt;strong&gt;copy of the golden image&lt;/strong&gt; is created and that’s the one expanded.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;golden-devstation-centos8-disk.qcow2 golden-devstation-centos8-disk-10G.qcow2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-resize &lt;span class=&quot;nt&quot;&gt;--expand&lt;/span&gt; /dev/sda2  golden-devstation-centos8-disk.qcow2 golden-devstation-centos8-disk-10G.qcow2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   0.0] Examining golden-devstation-centos8-disk-10G.qcow2
&lt;span class=&quot;k&quot;&gt;**********&lt;/span&gt;

Summary of changes:

/dev/sda1: This partition will be left alone.

/dev/sda2: This partition will be resized from 2.7G to 9.0G.  The
filesystem xfs on /dev/sda2 will be expanded using the ‘xfs_growfs’
method.

&lt;span class=&quot;k&quot;&gt;**********&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   2.2] Setting up initial partition table on golden-devstation-centos8-disk-10G.qcow2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   3.1] Copying /dev/sda1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   4.0] Copying /dev/sda2
 100%
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   8.5] Expanding /dev/sda2 using the ‘xfs_growfs’ method

Resize operation completed with no errors.  Before deleting the old disk,
carefully check that the resized disk boots and works correctly.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, it is verified that the image meets the expected size (see virtual size):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img info golden-devstation-centos8-disk-10G.qcow2
image: golden-devstation-centos8-disk-10G.qcow2
file format: qcow2
virtual size: 10G &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10737418240 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
disk size: 1.8G
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: &lt;span class=&quot;nb&quot;&gt;false
    &lt;/span&gt;refcount bits: 16
    corrupt: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;In case the developers are allowed to select between multiple flavours, e.g. different root filesystem sizes, you will end up with multiple containerized VM images. In the event that an additional block device is needed, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emptyDisk&lt;/code&gt; is the proper way to go.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;verify-the-custom-built-image&quot;&gt;Verify the custom-built image&lt;/h3&gt;

&lt;p&gt;Before continuing, it is suggested to verify the golden expanded image. Since the qcow2 image is not yet containerized, it can easily run on KVM/libvirt. In our case, the builder server has already in place the &lt;em&gt;Virtualization Host&lt;/em&gt; group packages.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;There are a lot of tools that allow us to run a qcow2 image in libvirt. In this example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virt-install&lt;/code&gt; is used, however, other tool that makes easy to deploy VM images and worth exploring is &lt;a href=&quot;https://github.com/karmab/kcli&quot;&gt;kcli&lt;/a&gt;&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;First, install &lt;a href=&quot;https://linux.die.net/man/1/virt-install&quot;&gt;virt-install&lt;/a&gt;, which is a command-line tool for creating new KVM, Xen, or Linux container guests using the “libvirt” hypervisor management library, and run a new VM from the golden image:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;virt-install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-install &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
2.2.1

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-install &lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt; 2048 &lt;span class=&quot;nt&quot;&gt;--vcpus&lt;/span&gt; 2 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; devstation-centos8 &lt;span class=&quot;nt&quot;&gt;--disk&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos8-disk-10G.qcow2,device&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;disk &lt;span class=&quot;nt&quot;&gt;--os-type&lt;/span&gt; Linux &lt;span class=&quot;nt&quot;&gt;--os-variant&lt;/span&gt; rhel8.1 &lt;span class=&quot;nt&quot;&gt;--virt-type&lt;/span&gt; kvm &lt;span class=&quot;nt&quot;&gt;--graphics&lt;/span&gt; none &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; default &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt;

Starting install...
Connected to domain devstation-centos8
Escape character is ^]

CentOS Linux 8 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Core&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Kernel 4.18.0-147.5.1.el8_1.x86_64 on an x86_64
devstation login:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Login as &lt;a href=&quot;#image-creation-with-builder-tool&quot;&gt;developer or sysadmin user&lt;/a&gt;, scale privileges and check that the VM is configured as expected.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--list-all&lt;/span&gt;
public &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;active&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  target: default
  icmp-block-inversion: no
  interfaces: ens3
  sources:
  services: cockpit dhcpv6-client http https mysql ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl is-active httpd
active
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl is-active mariadb
active
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl is-active sshd
active
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify the disk and partition sizes are correctly configured:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsblk
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    252:0    0  10G  0 disk
├─vda1 252:1    0   1G  0 part /boot
└─vda2 252:2    0   9G  0 part /

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
Filesystem      Size  Used Avail Use% Mounted on
devtmpfs        962M     0  962M   0% /dev
tmpfs           995M     0  995M   0% /dev/shm
tmpfs           995M   17M  979M   2% /run
tmpfs           995M     0  995M   0% /sys/fs/cgroup
/dev/vda2       9.0G  1.9G  7.2G  21% /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;In case you are unsure on which partition you need to expand or contains the root filesystem, just run a VM from the golden qcow2 image and execute the previous commands. Then delete the VM and expand the image accordingly.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, notice how the cloned repository has been copied successfully during the built process. Users can check the custom image information connecting to the local Apache server:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@devstation ~]# curl localhost/manual/
Dear developer,
&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
Welcome to the devstation server.

&amp;lt;h2&amp;gt; How to use the devstation server &amp;lt;/h2&amp;gt;

Remember that before committing your changes to the corporate &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;management control server, you need to validate your code here.

&amp;lt;h2&amp;gt; Need &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;? &amp;lt;/h2&amp;gt;

Please contact us at sysadmin@corporate.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;image-tailoring-with-virt-customize&quot;&gt;Image tailoring with virt-customize&lt;/h3&gt;

&lt;p&gt;In the previous section, we verified that the golden image was successfully built. However, there are still a few things that need to be added so that the golden image can be successfully containerized and run on top of our OKD Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;First, a worthy package that is suggested to be included in the golden image is &lt;a href=&quot;https://cloud-init.io/&quot;&gt;cloud-init&lt;/a&gt;. KubeVirt allows you to create VM objects along with &lt;a href=&quot;https://kubevirt.io/user-guide/virtual_machines/startup_scripts/#cloud-init&quot;&gt;cloud-init&lt;/a&gt; configurations. Cloud-init will let our developers further adapt the custom image to their application needs. On the other hand, it has been agreed with the Software Engineering team to add a graphical interface to the custom image since there are developers that are not familiar with the terminal.&lt;/p&gt;

&lt;p&gt;The result will be &lt;strong&gt;two golden images CentOS 8&lt;/strong&gt;, both with cloud-init, but one will include a GUI and the other is terminal-based and therefore much lighter.&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;It is important to set the memsize of the building process to 4096m and have expanded the root filesystem otherwise you will face an out of space or/and out of memory error while installing the GNOME GUI.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;golden-devstation-centos8-disk-10G.qcow2 golden-devstation-centos8-disk-10G-gui.qcow2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-customize &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; qcow2 &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos8-disk-10G.qcow2 &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; cloud-init &lt;span class=&quot;nt&quot;&gt;--memsize&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;--selinux-relabel&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-customize &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; qcow2 &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos8-disk-10G-gui.qcow2 &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; @graphical-server-environment,cloud-init &lt;span class=&quot;nt&quot;&gt;--memsize&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;--run-command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;systemctl set-default graphical.target&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--selinux-relabel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At this point we built:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A golden CentOS 8 image which can run on libvirt/KVM virtualization servers (golden-devstation-centos8-disk.qcow2)&lt;/li&gt;
  &lt;li&gt;A 10G CentOS 8 image prepared to be executed by KubeVirt including cloud-init. (golden-devstation-centos8-disk-10G.qcow2)&lt;/li&gt;
  &lt;li&gt;A 10G CentOS 8 image prepared to be executed by KubeVirt including both cloud-init and GNOME GUI (golden-devstation-centos8-disk-10G-gui.qcow2)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;building-a-standard-centos-7-image-from-cloud-images&quot;&gt;Building a standard CentOS 7 image from cloud images&lt;/h2&gt;

&lt;p&gt;In the previous section, it was shown how we can build and customize images from scratch using the Builder Image tool. However, there are settings that could not be configured even with the composer-cli. Thus, &lt;em&gt;virt-customize&lt;/em&gt; is used to fine-tune the custom image, i.e, add cloud-init and a graphical user interface.&lt;/p&gt;

&lt;p&gt;Since the Builder Tool is an &lt;a href=&quot;https://docs.centos.org/en-US/centos/install-guide/Composer/&quot;&gt;experimental tool in CentOS 7&lt;/a&gt;, the company continues creating their golden CentOS 7 images based on CentOS cloud images. Comparing with the CentOS 8 workflow, the cloud image corresponds to the golden image even it is not built by the Systems Engineering department.&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;Note that with CentOS 7 images, the company is trusting a cloud image provided by a third party instead of creating one from scratch.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;image-creation-with-virt-customize&quot;&gt;Image creation with virt-customize&lt;/h3&gt;

&lt;p&gt;The process to create the golden CentOS 7 image is quite similar to the CentOS 8 one. However, in this case, the customize procedure is entirely done with &lt;em&gt;virt-customize&lt;/em&gt;. The first step is to download the cloud image.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos7-disk.qcow2 https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then, it is required to resize and expand the image to meet the agreed size of 10GB. The details are the same explained in the &lt;a href=&quot;#image-creation-with-builder-tool&quot;&gt;previous section&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img info golden-devstation-centos7-disk.qcow2
image: golden-devstation-centos7-disk.qcow2
file format: qcow2
virtual size: 8.0G &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8589934592 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
disk size: 819M
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: &lt;span class=&quot;nb&quot;&gt;false
    &lt;/span&gt;refcount bits: 16
    corrupt: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img resize golden-devstation-centos7-disk.qcow2 10G
Image resized.

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;golden-devstation-centos7-disk.qcow2 golden-devstation-centos7-disk-10G.qcow2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-resize &lt;span class=&quot;nt&quot;&gt;--expand&lt;/span&gt; /dev/sda1  golden-devstation-centos7-disk.qcow2 golden-devstation-centos7-disk-10G.qcow2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;In this case, unlike CentOS 8 image, the partition where the root filesystem resides is &lt;strong&gt;/dev/sda1&lt;/strong&gt;. That’s the partition that needs to be expanded.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Below it is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virt-customize&lt;/code&gt; command that modifies the CentOS 7 &lt;em&gt;expanded&lt;/em&gt; cloud image by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installing the required packages (however, not the exact versions)&lt;/li&gt;
  &lt;li&gt;Changing the root password&lt;/li&gt;
  &lt;li&gt;Setting devstation as hostname to the customized image&lt;/li&gt;
  &lt;li&gt;Configuring the time zone&lt;/li&gt;
  &lt;li&gt;Enabling the installed services&lt;/li&gt;
  &lt;li&gt;Including files from the manual.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;Manual files must be pulled first from &lt;a href=&quot;https://github.com/alosadagrande/lorax&quot;&gt;alosadagrande/lorax&lt;/a&gt; GitHub repository.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-customize &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; qcow2 &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos7-disk-10G.qcow2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; cloud-init,mod_ssl,httpd,mariadb-server,php,openssh-server &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;--memsize&lt;/span&gt; 4096  &lt;span class=&quot;nt&quot;&gt;--hostname&lt;/span&gt; devstation  &lt;span class=&quot;nt&quot;&gt;--selinux-relabel&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--timezone&lt;/span&gt; Europe/Madrid &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;--root-password&lt;/span&gt; password:toor &lt;span class=&quot;nt&quot;&gt;--password&lt;/span&gt; centos:password:developer123 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;--run-command&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'systemctl enable httpd'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--run-command&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'systemctl enable mariadb'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;--mkdir&lt;/span&gt; /var/www/html/manual &lt;span class=&quot;nt&quot;&gt;--upload&lt;/span&gt; ~/lorax/index.html:/var/www/html/manual/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;Instead of executing all parameters in the command-line it is possible to create a file that is used as an input file for &lt;em&gt;virt-customize&lt;/em&gt;. See option &lt;a href=&quot;http://libguestfs.org/virt-customize.1.html&quot;&gt;commands-from-file&lt;/a&gt;&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to create the graphical user interface image in a similar way as we did previously with CentOS 8 image.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;golden-devstation-centos7-disk-10G.qcow2 golden-devstation-centos7-disk-10G-gui.qcow2

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-customize &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; qcow2 &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos7-disk-10G-gui.qcow2 &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; cloud-init &lt;span class=&quot;nt&quot;&gt;--memsize&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;--run-command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yum groupinstall 'GNOME Desktop' -y&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--run-command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;systemctl set-default graphical.target&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--selinux-relabel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point we built:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A golden CentOS 7 image which can run on libvirt/KVM virtualization servers (golden-devstation-centos7-disk.qcow2).&lt;/li&gt;
  &lt;li&gt;A 10G CentOS 7 image prepared to be executed by KubeVirt which includes cloud-init (golden-devstation-centos7-disk-10G.qcow2).&lt;/li&gt;
  &lt;li&gt;A 10G CentOS 7 image prepared to be executed by KubeVirt which includes cloud-init and GNOME GUI (golden-devstation-centos7-disk-10G-gui.qcow2).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;image-containerization-procedure&quot;&gt;Image containerization procedure&lt;/h2&gt;

&lt;p&gt;The procedure to inject a &lt;em&gt;VirtualMachineInstance&lt;/em&gt; disk into a container images is pretty well explained in &lt;a href=&quot;https://kubevirt.io/user-guide/virtual_machines/disks_and_volumes&quot;&gt;containerDisk Workflow example&lt;/a&gt; from the official documentation. Only RAW and QCOW2 formats are supported and the disk it is recommended to be placed into the /disk directory inside the container. Actually, it can be placed in other directories, but then, it must be explicitly configured when creating the &lt;em&gt;VirtualMachine&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Currently, there are 4 standardized images ready to be containerized. The process is the same for all of them, so in order to keep it short, we are just going to show the process of creating a container image from the CentOS 8 QCOW2 images.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;These are the four available images: CentOS 8 with GNOME, CentOS 8 terminal only, CentOS 7 with GNOME and CentOS 7 terminal only.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; Containerfile
FROM scratch
ADD golden-devstation-centos8-disk-10G.qcow2 /disk/
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;Containerfile
FROM scratch
ADD golden-devstation-centos8-disk-10G-gui.qcow2 /disk/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, it is time to build the image. In our case, &lt;a href=&quot;https://podman.io/&quot;&gt;podman&lt;/a&gt; has chosen to execute the task, however, we could have used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildah&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman build &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; openshift/devstation-centos8:terminal
STEP 1: FROM scratch
STEP 2: ADD golden-devstation-centos8-disk-10G.qcow2 /disk/
STEP 3: COMMIT openshift/devstation-centos8:terminal
8a9e83db71f08995fa73699c4e5a2d331c61b393daa18aa0b63269dc10078467

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman build &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; openshift/devstation-centos8:gui
STEP 1: FROM scratch
STEP 2: ADD golden-devstation-centos8-disk-10G-gui.qcow2 /disk/
STEP 3: COMMIT openshift/devstation-centos8:gui
2a4ecc7bf9da91bcb5847fd1cf46f4cd10726a4ceae88815eb2a9ab38b316be4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the successful build, the images are stored locally to the local server, in our case the Builder Server. Remember that they must be uploaded to the OKD container registry.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman images
REPOSITORY                               TAG        IMAGE ID       CREATED          SIZE
localhost/openshift/devstation-centos8   gui        2a4ecc7bf9da   3 minutes ago    5.72 GB
localhost/openshift/devstation-centos8   terminal   8a9e83db71f0   13 minutes ago   1.94 GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;store-the-image-in-the-container-registry&quot;&gt;Store the image in the container registry&lt;/h3&gt;

&lt;p&gt;Before pushing the images to the corporate container registry, it must be verified that the OKD registry is available outside the Kubernetes cluster. This allows any authenticated user to gain external access to push images into the OKD Kubernetes cluster. &lt;a href=&quot;https://docs.openshift.com/container-platform/4.3/registry/securing-exposing-registry.html&quot;&gt;Exposing the secure registry&lt;/a&gt; consists basically on configuring a route and expose that route in the OKD routers. Once done, external &lt;strong&gt;authenticated&lt;/strong&gt; access is allowed.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;oc get route &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; openshift-image-registry
NAME            HOST/PORT                                                     PATH   SERVICES         PORT    TERMINATION   WILDCARD
default-route   default-route-openshift-image-registry.apps.okd.okdlabs.com          image-registry   &amp;lt;all&amp;gt;   reencrypt     None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;In order to upload your containerized images to the OKD registry, the user must be authenticated and &lt;a href=&quot;https://docs.openshift.com/container-platform/4.3/registry/accessing-the-registry.html&quot;&gt;authorized to execute the push action&lt;/a&gt;. The role that must be added to the OKD user is the &lt;em&gt;registry-editor&lt;/em&gt;&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In order to authenticate with the OKD container registry, podman is employed as explained in the &lt;a href=&quot;https://docs.openshift.com/container-platform/4.3/registry/securing-exposing-registry.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;oc login https://api.okd.okdlabs.com:6443 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; alosadag
The server uses a certificate signed by an unknown authority.
You can bypass the certificate check, but any data you send to the server could be intercepted by others.
Use insecure connections? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: y

Authentication required &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;https://api.okd.okdlabs.com:6443 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;openshift&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Username: alosadag
Password:
Login successful.

&lt;span class=&quot;nv&quot;&gt;$ HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;oc get route default-route &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; openshift-image-registry &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jsonpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{.spec.host }'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOST&lt;/span&gt;
default-route-openshift-image-registry.apps.okd.okdlabs.com

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt; podman login &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;oc &lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;oc &lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tls-verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOST&lt;/span&gt;
Login Succeeded!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before pushing the images, adapt container images to the proper name so they can be uploaded to private registries. Since it is agreed that all developers must be able to pull the images into their namespaces, the images need to be pushed to the openshift project.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://docs.openshift.com/container-platform/4.6/openshift_images/images-understand.html&quot;&gt;Understanding containers, images and imageStreams&lt;/a&gt; from OpenShift documentation deeply explains container image naming.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman tag localhost/openshift/devstation-centos8:gui default-route-openshift-image-registry.apps.okd.okdlabs.com/openshift/devstation:v8-terminal
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman push default-route-openshift-image-registry.apps.okd.okdlabs.com/openshift/devstation:v8-terminal &lt;span class=&quot;nt&quot;&gt;--tls-verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman tag localhost/openshift/devstation-centos:gui default-route-openshift-image-registry.apps.okd.okdlabs.com/openshift/devstation:v8-gui
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman push default-route-openshift-image-registry.apps.okd.okdlabs.com/openshift/devstation:v8-gui &lt;span class=&quot;nt&quot;&gt;--tls-verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify that the images are stored correctly in the OKD container registry by checking the &lt;a href=&quot;https://docs.openshift.com/container-platform/4.6/openshift_images/image-streams-manage.html#working-with-imagestreams&quot;&gt;imageStream&lt;/a&gt;. As shown below, both images were uploaded successfully since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devstation&lt;/code&gt; imageStream contains two images with v8-gui and v8-terminal tags respectively.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;oc describe imageStream devstation &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; openshift
Name:			devstation
Namespace:		openshift
Created:		23 hours ago
Labels:			&amp;lt;none&amp;gt;
Annotations:		&amp;lt;none&amp;gt;
Image Repository:	default-route-openshift-image-registry.apps.okd.okdlabs.com/openshift/devstation
Image Lookup:		&lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;Unique Images:		2
Tags:			2

v8-gui
  no spec tag

  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; image-registry.openshift-image-registry.svc:5000/openshift/devstation@sha256:e301d935c1cb5a64d41df340d78e6162ddb0ede9b9b5df9c20df10d78f8fde0f
      2 hours ago

v8-terminal
  no spec tag

  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; image-registry.openshift-image-registry.svc:5000/openshift/devstation@sha256:47c2ba0c463da84fa1569b7fb8552c07167f3464a9ce3b6e3f607207ba4cee65
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, the images are stored in a private registry and ready to be consumed by the developers.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;In case you do not have a corporate private registry available, you can upload images to any free public container registry. Then, consume the container images from the public container registry. Just in case you want to use them or take a look, it has been uploaded to my &lt;a href=&quot;https://quay.io/repository/alosadag/devstation?tab=tags&quot;&gt;public container image repository at quay.io&lt;/a&gt;&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/okd_is_devstation.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x467&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/okd_is_devstation.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In the next article, we will show how our developers can consume the custom-built images to run into the OKD Kubernetes cluster.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, it was detailed a real use of a company that uses KubeVirt to run standardized environments to run and test the code of their applications. In their use case, VMs are spinned up on-demand in the OKD Kubernetes cluster by the developers. This makes them completely autonomous creating and deleting their environments once the tasks are accomplished.&lt;/p&gt;

&lt;p&gt;The article explained how to create a golden image using different tools such as Builder Tool and virt-customize. Once the custom-built image was ready, then it is transformed into a container image so that it can be uploaded and stored into a container registry.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;In the next blog post, the custom-built containerized VM will be deployed from our corporate registry into our Kubernetes cluster. We will show how the developers can fine-tune even more the image deployment, how extra storage can be requested and how to connect to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualMachineInstance&lt;/code&gt;. Stay tuned!&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubevirt.io/pages/cloud.html&quot;&gt;KubeVirt installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.redhat.com/blog/2019/05/08/red-hat-enterprise-linux-8-image-builder-building-custom-system-images/&quot;&gt;Image Builder: Building custom system images&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://weldr.io/lorax/composer-cli.html&quot;&gt;Composer-cli information&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://quay.io/repository/alosadag/devstation?tab=tags&quot;&gt;Custom-built images available at quay.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Alberto Losada Grande</name></author><category term="news" /><category term="kubevirt" /><category term="kubernetes" /><category term="virtual machine" /><category term="okd" /><category term="containerDisk" /><category term="registry" /><category term="composer-cli" /><category term="virt-customize" /><category term="builder tool" /><summary type="html">Table of contents</summary></entry></feed>