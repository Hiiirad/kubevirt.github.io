<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://kubevirt.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://kubevirt.io//" rel="alternate" type="text/html" /><updated>2021-03-31T15:55:19+00:00</updated><id>https://kubevirt.io//feed.xml</id><title type="html">KubeVirt.io</title><subtitle>Virtual Machine Management on Kubernetes</subtitle><entry><title type="html">KubeVirt v0.39.0</title><link href="https://kubevirt.io//2021/changelog-v0.39.0.html" rel="alternate" type="text/html" title="KubeVirt v0.39.0" /><published>2021-03-10T00:00:00+00:00</published><updated>2021-03-10T00:00:00+00:00</updated><id>https://kubevirt.io//2021/changelog-v0.39.0</id><content type="html" xml:base="https://kubevirt.io//2021/changelog-v0.39.0.html">&lt;h2 id=&quot;v0390&quot;&gt;v0.39.0&lt;/h2&gt;

&lt;p&gt;Released on: Wed Mar 10 14:51:58 2021 +0000&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[PR #5010][jean-edouard] Migrated VMs stay persistent and can therefore survive S3, among other things.&lt;/li&gt;
  &lt;li&gt;[PR #4952][ashleyschuett] Create warning NodeUnresponsive event if a node is running a VMI pod but not a virt-handler pod&lt;/li&gt;
  &lt;li&gt;[PR #4686][davidvossel] Automated workload updates via new KubeVirt WorkloadUpdateStrategy API&lt;/li&gt;
  &lt;li&gt;[PR #4886][awels] Hotplug support for WFFC datavolumes.&lt;/li&gt;
  &lt;li&gt;[PR #5026][AlonaKaplan] virt-launcher, masquerade binding - prefer nft over iptables.&lt;/li&gt;
  &lt;li&gt;[PR #4921][borod108] Added support for Sysprep in the API. A user can now add a answer file through a ConfigMap or a Secret. The User Guide is updated accordingly. /kind feature&lt;/li&gt;
  &lt;li&gt;[PR #4874][ormergi] Add new feature-gate SRIOVLiveMigration,&lt;/li&gt;
  &lt;li&gt;[PR #4917][iholder-redhat] Now it is possible to enable QEMU SeaBios debug logs setting virt-launcher log verbosity to be greater than 5.&lt;/li&gt;
  &lt;li&gt;[PR #4966][arnongilboa] Solve virtctl ‚ÄúError when closing file ‚Ä¶ file already closed‚Äù that shows after successful image upload&lt;/li&gt;
  &lt;li&gt;[PR #4489][salanki] Fix a bug where a disk.img file was created on filesystems mounted via Virtio-FS&lt;/li&gt;
  &lt;li&gt;[PR #4982][xpivarc] Fixing handling of transient domain&lt;/li&gt;
  &lt;li&gt;[PR #4984][ashleyschuett] Change customizeComponents.patches such that ‚Äò*‚Äô resourceName or resourceType matches all, all fields of a patch (type, patch, resourceName, resourceType) are now required.&lt;/li&gt;
  &lt;li&gt;[PR #4972][vladikr] allow disabling pvspinlock to support older guest kernels&lt;/li&gt;
  &lt;li&gt;[PR #4927][yuhaohaoyu] Fix of XML and JSON marshalling/unmarshalling for user defined device alias names which can make migrations fail.&lt;/li&gt;
  &lt;li&gt;[PR #4552][rthallisey] VMs using bridged networking will survive a kubelet restart by having kubevirt create a dummy interface on the virt-launcher pods, so that some Kubernetes CNIs, that have implemented the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CHECK&lt;/code&gt; RPC call, will not cause VMI pods to enter a failed state.&lt;/li&gt;
  &lt;li&gt;[PR #4883][iholder-redhat] Bug fixed: Enabling libvirt debug logs only if debugLogs label value is ‚Äútrue‚Äù, disabling otherwise.&lt;/li&gt;
  &lt;li&gt;[PR #4840][alicefr] Generate k8s events on IO errors&lt;/li&gt;
  &lt;li&gt;[PR #4940][vladikr] permittedHostDevices will support both upper and lowercase letters in the device ID&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kubeü§ñ</name></author><category term="releases" /><category term="release notes" /><category term="changelog" /><summary type="html">v0.39.0</summary></entry><entry><title type="html">The KubeVirt Summit 2021 is a wrap!</title><link href="https://kubevirt.io//2021/KubeVirt-Summit-Wrap-Up.html" rel="alternate" type="text/html" title="The KubeVirt Summit 2021 is a wrap!" /><published>2021-03-03T00:00:00+00:00</published><updated>2021-03-03T00:00:00+00:00</updated><id>https://kubevirt.io//2021/KubeVirt-Summit-Wrap-Up</id><content type="html" xml:base="https://kubevirt.io//2021/KubeVirt-Summit-Wrap-Up.html">&lt;p&gt;Just a few weeks ago, the KubeVirt community had their first ever dedicated
online event, the &lt;a href=&quot;/summit/&quot;&gt;KubeVirt Summit&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;We are very happy to have had this opportunity to meet so many community
members, hear from users, vendors and contributors, and learn so many things
about KubeVirt.&lt;/p&gt;

&lt;p&gt;If you missed the event, or if you were there and want to remember the great
time we had, the &lt;a href=&quot;https://youtube.com/playlist?list=PLnLpXX8KHIYyQi7Phsf5-73r5fj1AOBox&quot;&gt;session recordings&lt;/a&gt;
are available in the &lt;a href=&quot;https://www.youtube.com/c/KubeVirt&quot;&gt;KubeVirt YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The landing page about the &lt;a href=&quot;/summit/&quot;&gt;KubeVirt Summit&lt;/a&gt;
contains a detailed list of all the sessions, with information about the
contents, presenters, and direct links to each session recording and slides
(where available).&lt;/p&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks!&lt;/h2&gt;

&lt;p&gt;We would like to thank everyone who contributed to make this event happen: all
the presenters / session leads, everyone who proposed a session, the various
community members who contributed to the organization, all the attendees, and
the &lt;a href=&quot;https://cncf.io/&quot;&gt;Container-native Computing Foundation&lt;/a&gt; who sponsored the
event.&lt;/p&gt;

&lt;h2 id=&quot;i-want-more&quot;&gt;I want more!&lt;/h2&gt;

&lt;p&gt;We are just wrapping up this first edition. Based on this experience, we really
hope to have more community events of this type in the future, but it is still a
bit early to say when/where how.&lt;/p&gt;

&lt;p&gt;For now, please keep the conversations going through the various community channels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;https://groups.google.com/forum/#!forum/kubevirt-dev&quot;&gt;mailing list&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://kubernetes.slack.com/archives/C8ED7RKFE&quot;&gt;#virtualization Slack channel&lt;/a&gt; in &lt;a href=&quot;https://slack.k8s.io/&quot;&gt;Kubernetes Slack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our &lt;a href=&quot;https://calendar.google.com/calendar/embed?src=18pc0jur01k8f2cccvn5j04j1g%40group.calendar.google.com&amp;amp;ctz=Etc%2FGMT&quot;&gt;community meetings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/kubevirt&quot;&gt;github repositories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/kubevirt&quot;&gt;@kubevirt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Pep Turr√≥ Mauri</name></author><category term="news" /><category term="kubevirt" /><category term="event" /><category term="community" /><summary type="html">Just a few weeks ago, the KubeVirt community had their first ever dedicated online event, the KubeVirt Summit!</summary></entry><entry><title type="html">KubeVirt v0.38.0</title><link href="https://kubevirt.io//2021/changelog-v0.38.0.html" rel="alternate" type="text/html" title="KubeVirt v0.38.0" /><published>2021-02-08T00:00:00+00:00</published><updated>2021-02-08T00:00:00+00:00</updated><id>https://kubevirt.io//2021/changelog-v0.38.0</id><content type="html" xml:base="https://kubevirt.io//2021/changelog-v0.38.0.html">&lt;h2 id=&quot;v0380&quot;&gt;v0.38.0&lt;/h2&gt;

&lt;p&gt;Released on: Mon Feb 8 13:15:32 2021 +0000&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[PR #4870][qinqon] Bump k8s deps to 0.20.2&lt;/li&gt;
  &lt;li&gt;[PR #4571][yuvalturg] Added os, workflow and flavor labels to the kubevirt_vmi_phase_count metric&lt;/li&gt;
  &lt;li&gt;[PR #4659][salanki] Fixed an issue where non-root users inside a guest could not write to a Virtio-FS mount.&lt;/li&gt;
  &lt;li&gt;[PR #4844][xpivarc] Fixed limits/requests to accept int again&lt;/li&gt;
  &lt;li&gt;[PR #4850][rmohr] virtio-scsi now respects the useTransitionalVirtio flag instead of assigning a virtio version depending on the machine layout&lt;/li&gt;
  &lt;li&gt;[PR #4672][vladikr] allow increasing logging verbosity of infra components in KubeVirt CR&lt;/li&gt;
  &lt;li&gt;[PR #4838][rmohr] Fix an issue where it may not be able to update the KubeVirt CR after creation for up to minutes due to certificate propagation delays&lt;/li&gt;
  &lt;li&gt;[PR #4806][rmohr] Make the mutating webhooks for VMIs and VMs  required to avoid letting entities into the cluster which are not properly defaulted&lt;/li&gt;
  &lt;li&gt;[PR #4779][brybacki] Error messsge on virtctl image-upload to WaitForFirstConsumer DV&lt;/li&gt;
  &lt;li&gt;[PR #4749][davidvossel] KUBEVIRT_CLIENT_GO_SCHEME_REGISTRATION_VERSION env var for specifying exactly what client-go scheme version is registered&lt;/li&gt;
  &lt;li&gt;[PR #4772][jean-edouard] Faster VMI phase transitions thanks to an increased number of VMI watch threads in virt-controller&lt;/li&gt;
  &lt;li&gt;[PR #4730][rmohr] Add spec.domain.devices.useVirtioTransitional boolean to support virtio-transitional for old guests&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kubeü§ñ</name></author><category term="releases" /><category term="release notes" /><category term="changelog" /><summary type="html">v0.38.0</summary></entry><entry><title type="html">KubeVirt v0.37.0</title><link href="https://kubevirt.io//2021/changelog-v0.37.0.html" rel="alternate" type="text/html" title="KubeVirt v0.37.0" /><published>2021-01-18T00:00:00+00:00</published><updated>2021-01-18T00:00:00+00:00</updated><id>https://kubevirt.io//2021/changelog-v0.37.0</id><content type="html" xml:base="https://kubevirt.io//2021/changelog-v0.37.0.html">&lt;h2 id=&quot;v0370&quot;&gt;v0.37.0&lt;/h2&gt;

&lt;p&gt;Released on: Mon Jan 18 17:57:03 2021 +0000&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[PR #4654][AlonaKaplan] Introduce virt-launcher DHCPv6 server.&lt;/li&gt;
  &lt;li&gt;[PR #4669][kwiesmueller] Add nodeSelector to kubevirt components restricting them to run on linux nodes only.&lt;/li&gt;
  &lt;li&gt;[PR #4648][davidvossel] Update libvirt base container to be based of packages in rhel-av 8.3&lt;/li&gt;
  &lt;li&gt;[PR #4653][qinqon] Allow configure cloud-init with networkData only.&lt;/li&gt;
  &lt;li&gt;[PR #4644][ashleyschuett] Operator validation webhook will deny updates to the workloads object of the KubeVirt CR if there are running VMIs&lt;/li&gt;
  &lt;li&gt;[PR #3349][davidvossel] KubeVirt v1 GA api&lt;/li&gt;
  &lt;li&gt;[PR #4645][maiqueb] Re-introduce the CAP_NET_ADMIN, to allow migration of VMs already having it.&lt;/li&gt;
  &lt;li&gt;[PR #4546][yuhaohaoyu] Failure detection and handling for VM with EFI Insecure Boot in KubeVirt environments where EFI Insecure Boot is not supported by design.&lt;/li&gt;
  &lt;li&gt;[PR #4625][awels] virtctl upload now shows error when specifying access mode of ReadOnlyMany&lt;/li&gt;
  &lt;li&gt;[PR #4396][xpivarc] KubeVirt is now explainable!&lt;/li&gt;
  &lt;li&gt;[PR #4517][danielBelenky] Fix guest agent reporting.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kubeü§ñ</name></author><category term="releases" /><category term="release notes" /><category term="changelog" /><summary type="html">v0.37.0</summary></entry><entry><title type="html">KubeVirt Summit is coming!</title><link href="https://kubevirt.io//2021/KubeVirt-Summit-announce.html" rel="alternate" type="text/html" title="KubeVirt Summit is coming!" /><published>2021-01-12T00:00:00+00:00</published><updated>2021-01-12T00:00:00+00:00</updated><id>https://kubevirt.io//2021/KubeVirt-Summit-announce</id><content type="html" xml:base="https://kubevirt.io//2021/KubeVirt-Summit-announce.html">&lt;p&gt;Exciting news! The KubeVirt community are in the process of planning the first ever &lt;strong&gt;KubeVirt Summit&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;save-the-dates&quot;&gt;Save the dates!&lt;/h2&gt;

&lt;p&gt;The event will take place online during two half-days:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dates: February 9 and 10, 2021.&lt;/li&gt;
  &lt;li&gt;Time: 15:00 ‚Äì 19:00 UTC (10:00‚Äì14:00 EST, 16:00‚Äì20:00 CET)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;proposing-topics&quot;&gt;Proposing topics&lt;/h2&gt;

&lt;p&gt;We want to encourage anyone who is interested in presenting to submit a topic to
our community repo
&lt;a href=&quot;https://github.com/kubevirt/community/tree/master/events/2021-kubevirt-summit/proposals&quot;&gt;here&lt;/a&gt;. Simply
copy the
&lt;a href=&quot;https://github.com/kubevirt/community/blob/master/events/2021-kubevirt-summit/proposals/proposal-template.md&quot;&gt;template&lt;/a&gt; in that repo directory as a new file, fill in the details pertaining to your
session, and submit your proposal as a Pull Request.&lt;/p&gt;

&lt;h2 id=&quot;keep-up-to-date&quot;&gt;Keep up to date&lt;/h2&gt;

&lt;p&gt;The event has a landing page &lt;a href=&quot;/summit/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More details will be shared as they become available, here in the website and also on our &lt;a href=&quot;https://groups.google.com/forum/#!forum/kubevirt-dev&quot;&gt;mailing list&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/kubevirt&quot;&gt;twitter&lt;/a&gt; and our &lt;a href=&quot;https://calendar.google.com/calendar/embed?src=18pc0jur01k8f2cccvn5j04j1g%40group.calendar.google.com&amp;amp;ctz=Etc%2FGMT&quot;&gt;weekly community meetings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reach out through any of these channels to get involved.&lt;/p&gt;

&lt;p&gt;Looking forward to meeting you there!&lt;/p&gt;</content><author><name>Pep Turr√≥ Mauri</name></author><category term="news" /><category term="kubevirt" /><category term="event" /><category term="community" /><summary type="html">Exciting news! The KubeVirt community are in the process of planning the first ever KubeVirt Summit!</summary></entry><entry><title type="html">KubeVirt v0.36.0</title><link href="https://kubevirt.io//2020/changelog-v0.36.0.html" rel="alternate" type="text/html" title="KubeVirt v0.36.0" /><published>2020-12-16T00:00:00+00:00</published><updated>2020-12-16T00:00:00+00:00</updated><id>https://kubevirt.io//2020/changelog-v0.36.0</id><content type="html" xml:base="https://kubevirt.io//2020/changelog-v0.36.0.html">&lt;h2 id=&quot;v0360&quot;&gt;v0.36.0&lt;/h2&gt;

&lt;p&gt;Released on: Wed Dec 16 14:30:37 2020 +0000&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[PR #4667][kubevirt-bot] Update libvirt base container to be based of packages in rhel-av 8.3&lt;/li&gt;
  &lt;li&gt;[PR #4634][kubevirt-bot] Failure detection and handling for VM with EFI Insecure Boot in KubeVirt environments where EFI Insecure Boot is not supported by design.&lt;/li&gt;
  &lt;li&gt;[PR #4647][kubevirt-bot] Re-introduce the CAP_NET_ADMIN, to allow migration of VMs already having it.&lt;/li&gt;
  &lt;li&gt;[PR #4627][kubevirt-bot] Fix guest agent reporting.&lt;/li&gt;
  &lt;li&gt;[PR #4458][awels] It is now possible to hotplug DataVolume and PVC volumes into a running Virtual Machine.&lt;/li&gt;
  &lt;li&gt;[PR #4025][brybacki] Adds a special handling for DataVolumes in WaitForFirstConsumer state to support CDI‚Äôs delayed binding mode.&lt;/li&gt;
  &lt;li&gt;[PR #4217][mfranczy] Set only an IP address for interfaces reported by qemu-guest-agent. Previously that was CIDR.&lt;/li&gt;
  &lt;li&gt;[PR #4195][davidvossel] AccessCredentials API for dynamic user/password and ssh public key injection&lt;/li&gt;
  &lt;li&gt;[PR #4335][oshoval] VMI status displays SRIOV interfaces with their network name only when they have originally&lt;/li&gt;
  &lt;li&gt;[PR #4408][andreabolognani] This version of KubeVirt includes upgraded virtualization technology based on libvirt 6.6.0 and QEMU 5.1.0.&lt;/li&gt;
  &lt;li&gt;[PR #4514][ArthurSens] &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain&lt;/code&gt; label removed from metric &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubevirt_vmi_memory_unused_bytes&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;[PR #4542][danielBelenky] Fix double migration on node evacuation&lt;/li&gt;
  &lt;li&gt;[PR #4506][maiqueb] Remove CAP_NET_ADMIN from the virt-launcher pod.&lt;/li&gt;
  &lt;li&gt;[PR #4501][AlonaKaplan] CAP_NET_RAW removed from virt-launcher.&lt;/li&gt;
  &lt;li&gt;[PR #4488][salanki] Disable Virtio-FS metadata cache to prevent OOM conditions on the host.&lt;/li&gt;
  &lt;li&gt;[PR #3937][vladikr] Generalize host devices assignment. Provides an interface between kubevirt and external device plugins. Provides a mechanism for whitelisting host devices.&lt;/li&gt;
  &lt;li&gt;[PR #4443][rmohr] All kubevirt webhooks support now dry-runs.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kubeü§ñ</name></author><category term="releases" /><category term="release notes" /><category term="changelog" /><summary type="html">v0.36.0</summary></entry><entry><title type="html">Customizing images for containerized VMs part I</title><link href="https://kubevirt.io//2020/Customizing-images-for-containerized-vms.html" rel="alternate" type="text/html" title="Customizing images for containerized VMs part I" /><published>2020-12-10T00:00:00+00:00</published><updated>2020-12-10T00:00:00+00:00</updated><id>https://kubevirt.io//2020/Customizing-images-for-containerized-vms</id><content type="html" xml:base="https://kubevirt.io//2020/Customizing-images-for-containerized-vms.html">&lt;p&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/p&gt;

&lt;!-- TOC depthFrom:2 insertAnchor:false orderedList:false updateOnSave:true withLinks:true --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-vision&quot;&gt;The vision&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#preparation-of-the-environment&quot;&gt;Preparation of the environment&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#configuration-of-the-builder-image-server&quot;&gt;Configuration of the Builder image server&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-standard-centos-8-image&quot;&gt;Building standard CentOS 8 image&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#image-creation-with-builder-tool&quot;&gt;Image creation with Builder Tool&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#verify-the-custom-built-image&quot;&gt;Verify the custom-built image&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#image-tailoring-with-virt-customize&quot;&gt;Image tailoring with virt-customize&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-a-standard-centos-7-image-from-cloud-images&quot;&gt;Building a standard CentOS 7 image from cloud images&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#image-creation-with-virt-customize&quot;&gt;Image creation with virt-customize&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;The content of this article has been divided into two: this one, which is the first part, explains how to create a golden image using different tools such as &lt;em&gt;Builder Tool&lt;/em&gt; and &lt;em&gt;virt-customize&lt;/em&gt;. Once the custom-built image is ready, it is containerized so that it can be uploaded and stored into a container registry. The second part deals with the different ways the developers can deploy, modify and connect to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualMachineInstance&lt;/code&gt; running in the OKD Kubernetes cluster.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-vision&quot;&gt;The vision&lt;/h2&gt;

&lt;p&gt;If you work for a software factory, some kind of development environment standardization is probably in place. There are a lot of approaches which fit different use cases. In this blog post, our example company has allowed developers to choose their preferred editing tools and debugging environment locally to their workstations. However, before committing their changes to a Git repository, they need to validate them in a specifically tailored environment. This environment, due to legal restrictions, contains exact versions of the libraries, databases, web server or any other software previously agreed with customers.&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;Aside from the pre-commit environments, the company already has an automated continuous integration workflow composed by several shared environments: &lt;em&gt;development, integration and production&lt;/em&gt;.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This blog post focuses on showing a use case where containerized VMs running on top of Kubernetes ease the deployment and creation of standardized VMs to our developers. These VMs are meant to be ephemeral. However, if necessary, additional non-persistent disk or shared persistent storage can be attached so that important information can be kept safe.&lt;/p&gt;

&lt;p&gt;Along the process, different approaches and tools to create custom VM images that will be stored in a corporate registry are detailed. Containerizing VMs means adapting them so that they can be saved in a container registry. Being able to manage VMs as container images leverages the benefits of a container registry, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The registry becomes a &lt;strong&gt;source of truth&lt;/strong&gt; for the VMs you want to run. Everybody can list all VMs available searching on a centralized point.&lt;/li&gt;
  &lt;li&gt;The container registry, depending on the storage size, contains historical information of all the VMs, which might have multiple different versions, identified by their tags. Any developer with the proper permissions is able to run any specific version of your standardized VM.&lt;/li&gt;
  &lt;li&gt;It is the unique point where all your VMs are stored avoiding having them spread all over your infrastructure.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;A container image registry is a service that stores container images, and is hosted either by a third-party or as a public/private registry such as Docker Hub, Quay, and so on.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The ambitious goal is allowing the developers to deploy standardized VMs on the current Kubernetes infrastructure. Then, execute the required tests and if they are good, push the code to the corporate Git repositories and delete the VM eventually.&lt;/p&gt;

&lt;p&gt;This goal is divided into three main procedures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create custom standardized VM images, also known as golden images.&lt;/li&gt;
  &lt;li&gt;Containerize the resulting golden VM images.&lt;/li&gt;
  &lt;li&gt;Deploy the proper VM images from the corporate registry into the OKD Kubernetes cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;preparation-of-the-environment&quot;&gt;Preparation of the environment&lt;/h2&gt;

&lt;p&gt;Running containerized VMs in KubeVirt uses the &lt;a href=&quot;https://kubevirt.io/user-guide/virtual_machines/disks_and_volumes/#containerdisk&quot;&gt;containerDisk&lt;/a&gt; feature which provides the ability to store and distributed VM disks in the container image registry. The disks are pulled from the container registry and reside on the local node hosting the VMs that consume the disks.&lt;/p&gt;

&lt;p&gt;The company already have an &lt;a href=&quot;https://www.okd.io/&quot;&gt;OKD 4 Kubernetes cluster&lt;/a&gt; installed which provides out of the box a container registry and some required security features such as &lt;em&gt;Role Based Access Controls (RBAC)&lt;/em&gt; and &lt;em&gt;Security Context Constraints (SCC)&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;In the &lt;a href=&quot;https://blog.openshift.com/&quot;&gt;OpenShift blog&lt;/a&gt; there is a post called &lt;a href=&quot;https://blog.openshift.com/enterprise-kubernetes-with-openshift-part-one/&quot;&gt;Enterprise Kubernetes with OpenShift&lt;/a&gt; where you can find valuable information between the similarities and differences between OKD and Kubernetes.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On top of the OKD cluster, KubeVirt is required so that we can run our virtual machines. The installation process is pretty well detailed in the &lt;a href=&quot;https://kubevirt.io/pages/cloud.html&quot;&gt;KubeVirt‚Äôs documentation&lt;/a&gt;. Below it is shown how KubeVirt components can be seen from the OKD web console.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;KubeVirt version deployed is &lt;strong&gt;0.34.2&lt;/strong&gt; which is the latest at the moment of writing.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KUBEVIRT_VERSION&lt;/span&gt;
0.34.2

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://github.com/kubevirt/kubevirt/releases/download/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBEVIRT_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/kubevirt-operator.yaml
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://github.com/kubevirt/kubevirt/releases/download/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBEVIRT_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/kubevirt-cr.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/kubevirt_okd.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x520&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/kubevirt_okd.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;&lt;strong&gt;oc&lt;/strong&gt; is the specific command-line tool for OKD, however, it is based in &lt;em&gt;kubectl&lt;/em&gt; plus some additional features detailed here. It is probably that along the blog post, you can find executions with &lt;em&gt;oc&lt;/em&gt; or &lt;em&gt;kubectl&lt;/em&gt; interchangeably.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerDisks&lt;/code&gt; are created from RAW or &lt;a href=&quot;https://www.linux-kvm.org/page/Qcow2&quot;&gt;QCOW2&lt;/a&gt; virtual machine images. Nevertheless, virtual machine images with all the agreed software and proper configuration must be created previously. The company currently uses CentOS 7 as their approved base operating system to run their applications. However, during the last months, it has been encouraging to move to the recently released version 8 of CentOS.&lt;/p&gt;

&lt;p&gt;From a long time they had been using the prebuilt &lt;a href=&quot;https://cloud.centos.org/centos/&quot;&gt;CentOS cloud images&lt;/a&gt; with &lt;a href=&quot;http://libguestfs.org/virt-customize.1.html&quot;&gt;virt-customize&lt;/a&gt;, which allowed them to modify the prebuilt cloud images. As a trade-off, they had to trust on the cloud image provided by CentOS or verify if new packages were added on each release.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;&lt;strong&gt;virt-customize&lt;/strong&gt; can customize a virtual machine (disk image) by installing packages, editing configuration files, and so on. Virt-customize modifies the guest or disk image in place.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, they are starting to use a new tool called &lt;a href=&quot;https://docs.centos.org/en-US/centos/install-guide/Composer/&quot;&gt;Image Builder&lt;/a&gt; that creates deployment-ready customized system images from scratch. Furthermore, there is an integration with Cockpit where you can create custom CentOS images in various formats including QCOW2 for OpenStack, AMI (Amazon Machine Image), VHD (Azure Disk Image) etc. from a friendly user interface.&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;There are a lot of tools that can accomplish the objective of creating custom images. Here we are focusing on two: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virt-customize&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image Builder&lt;/code&gt;.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Along this blog post, both tools are used together in the image building process, leveraging their strengths. In the following diagram is depicted the different agents that take part in the process of running our standardized VMs in Kubernetes. This workflow includes the creation and customization of the images, their containerization, storing them into the OKD container registry and finally the creation of the VMs in Kubernetes by the employees.&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/diagram-customizing-images.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x320&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/diagram-customizing-images.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;okd imageStream devstation&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configuration-of-the-builder-image-server&quot;&gt;Configuration of the Builder image server&lt;/h3&gt;

&lt;p&gt;In order to prepare the building environment, it is recommended to install Image Builder in a dedicated server as it has specific security requirements. Actually, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lorax-composer&lt;/code&gt; which is one of its components doesn‚Äôt work properly with SELinux running, as it installs an entire OS image in an alternate directory.&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;As shown in the &lt;a href=&quot;https://weldr.io/Running-Composer-on-RHEL/&quot;&gt;lorax-composer documentation&lt;/a&gt; SELinux must be disabled. However, I have been able to create custom images successfully with SELinux enabled. In case you find any problems during your building, check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lorax-composer&lt;/code&gt; logs in journal in order to get more detailed information.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here it is a table where the software required to run the builds along with the versions have been used.&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;Operating System is &lt;strong&gt;CentOS 8&lt;/strong&gt; since CentOS 7 Image Builder is still an &lt;a href=&quot;https://docs.centos.org/en-US/centos/install-guide/Composer/&quot;&gt;experimental feature&lt;/a&gt;&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Component&lt;/th&gt;
      &lt;th&gt;Version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Operating System&lt;/td&gt;
      &lt;td&gt;CentOS Linux release 8.2.2004 (Core)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Libvirt&lt;/td&gt;
      &lt;td&gt;libvirtd (libvirt) 4.5.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;virt-customize&lt;/td&gt;
      &lt;td&gt;virt-customize 1.38.4rhel=8,release=14.module_el8.1.0+248+298dec18,libvirt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Image Builder&lt;/td&gt;
      &lt;td&gt;lorax-composer (28.14.42-2), composer-cli (composer-cli-28.14.42-2), cockpit-composer (cockpit-composer-12.1-1.el8.noarch)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Once the builder image server is provisioned with latest CentOS 8, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Virtualization Host&lt;/code&gt; group package is installed. It will be required to test our customized images locally before containerizing and pushing them to the OKD registry.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum groupinstall &lt;span class=&quot;s2&quot;&gt;&quot;Virtualization Host&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;libvirtd &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Next, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virt-customize&lt;/code&gt; is installed from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libguestfs-tools&lt;/code&gt; package along with the Image Builder. The latest is composed by lorax-composer, the Cockpit composer plugin and the composer-cli, which will be used to interact directly with Composer using command-line.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dnf &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; libguestfs-tools lorax-composer composer-cli cockpit-composer
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;lorax-composer.socket
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;lorax-composer &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl start cockpit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then, the local firewall is configured so that we can connect to the Cockpit web user interface from our workstation.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--add-service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cockpit &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; firewall-cmd &lt;span class=&quot;nt&quot;&gt;--add-service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cockpit &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Finally, connect to the Cockpit user interface by typing the IP or name of the Builder image server and port &lt;em&gt;TCP/9090&lt;/em&gt; (Cockpit‚Äôs default) in your favourite web browser. Then, log in with a local administrator account.&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/cockpit-gui.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x484&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/cockpit-gui.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The following image shows the Image Build plugin web page. Actually, what it is depicted are the different Image Build blueprints that are shipped by default. &lt;em&gt;The blueprint&lt;/em&gt; defines what should be included in your image. This includes packages, users, files, server settings ‚Ä¶&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/cockpit-first-page.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x333&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/cockpit-first-page.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&quot;premonition error&quot;&gt;&lt;div class=&quot;fa fa-exclamation-triangle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Error&lt;/p&gt;&lt;p&gt;If Cockpit‚Äôs web UI is not working, take a look at the output of the lorax service with the command:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;journalctl &lt;span class=&quot;nt&quot;&gt;-fu&lt;/span&gt; lorax-composer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;building-standard-centos-8-image&quot;&gt;Building standard CentOS 8 image&lt;/h2&gt;

&lt;p&gt;It is time to create our standardized CentOS 8 image or also called golden CentOS 8 image. This image will be built from the ground up using the Image Builder tool.&lt;/p&gt;

&lt;h3 id=&quot;image-creation-with-builder-tool&quot;&gt;Image creation with Builder Tool&lt;/h3&gt;

&lt;p&gt;The easiest way to start is creating a new blueprint (devstation-centos8) from the Cockpit user interface. This will produce a scaffold file where all the required modifications can be made. Here it is shown the process of creation a new blueprint from Cockpit:&lt;/p&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/create_blueprint.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x449&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/create_blueprint.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I would also suggest adding some users and all the packages you want to install from the user interface. In our case, we are going to create the following users by clicking on the details tab of the new blueprint. In both cases, the password is known by the respective group of users and also belongs to the wheel group.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Users&lt;/th&gt;
      &lt;th&gt;Note&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;sysadmin&lt;/td&gt;
      &lt;td&gt;Privileged user owned by the Systems Engineering team to troubleshoot and have access to the VM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;developer&lt;/td&gt;
      &lt;td&gt;These are the credentials used by the developers to access the VM&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/users.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x380&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/users.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Next, select the packages to include. Add the proper version of the package already agreed with the customer.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Package&lt;/th&gt;
      &lt;th&gt;Version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;httpd&lt;/td&gt;
      &lt;td&gt;2.4.37&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mod_ssl&lt;/td&gt;
      &lt;td&gt;2.4.37&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;php&lt;/td&gt;
      &lt;td&gt;7.2.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mariadb-server&lt;/td&gt;
      &lt;td&gt;10.3.17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;openssh-server&lt;/td&gt;
      &lt;td&gt;latest&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;At this point, you already have a blueprint template to start working. In addition to using the web console, you can also use the &lt;strong&gt;Image Builder CLI&lt;/strong&gt; to create images. When using the CLI, you have access to a few more customization options, such as managing firewall rules or download files from Git. Since we already have installed the composer-cli package in the &lt;a href=&quot;#configuration-of-the-builder-image-server&quot;&gt;Image Builder server&lt;/a&gt;, let‚Äôs use it to further customize our golden image.&lt;/p&gt;

&lt;p&gt;First, access to the Builder Image server and download the custom blueprint called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devstation-centos8&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli blueprints list
devstation-centos8
example-atlas
example-development
Example-http-server

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli blueprints save devstation-centos8
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;devstation-centos8.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;All composer-cli options are documented in the &lt;a href=&quot;https://weldr.io/lorax/composer-cli.html&quot;&gt;official webpage&lt;/a&gt;. Take a look if you need further detail.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, let‚Äôs edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devstation-centos8.toml&lt;/code&gt; file which is in charge of building our custom image.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The time zone has been added to match Europe/Madrid with proper NTP servers.&lt;/li&gt;
  &lt;li&gt;The kernel has been modified to allow connection via console.&lt;/li&gt;
  &lt;li&gt;Several firewall rules have been added to allow our services being accessed from outside.&lt;/li&gt;
  &lt;li&gt;Some services have been configured so that they are enabled and started at boot.&lt;/li&gt;
  &lt;li&gt;A Git repository has been configured to be cloned. Actually, it is a Git repository that contains a manual detailing how the custom image is configured and how it must be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;It is important to add console as a kernel option since the Builder Image tool disables access to serial console by default. It will allow the &lt;em&gt;virtctl&lt;/em&gt; command to connect to the VM while it is booting in our OKD Kubernetes cluster.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is the final building configuration file, it can be downloaded from &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/devstation-centos8.toml&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;devstation-centos8&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A developer station&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;modules&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[packages]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;httpd&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.4.37&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[packages]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mod_ssl&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.4.37&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[packages]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;php&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;7.2.24&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[packages]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mariadb-server&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.3.17&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[packages]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;openssh-server&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[customizations]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;devstation&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[customizations.kernel]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;console=tty0 console=ttyS0,19200n81&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[customizations.timezone]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;timezone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Europe/Madrid&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ntpservers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.europe.pool.ntp.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.europe.pool.ntp.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[customizations.user]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sysadmin&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Company Systems Admin&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$6$ZGmDxvGu3Q0M4RO/$KkfU0bD32FrLNpUCWEL8sy3dknJVyqExoy.NJMOcSCRjpt1H6sFKFjx8mFWn8H5CWTP7.bibPLBrRSRq3MrDb.&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/home/sysadmin/&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/usr/bin/bash&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wheel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[customizations.user]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;developer&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;developer&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;wheel&quot;]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$6$wlIgNacMnqCcXn3o$mPpw0apT4iZ3jDq0q6epXN3xCmNN.oVGFW.Gvu9r0nDVX.FXY3iCwfFkfPEcmhj7Kxw4Ppoes2LsUzPtNRjez0&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[customizations.services]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;httpd&quot;,&quot;mariadb&quot;,&quot;sshd&quot;]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[customizations.firewall.services]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;http&quot;,&quot;https&quot;,&quot;mysql&quot;,&quot;ssh&quot;]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[repos.git]]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;rpmname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manual&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;rpmversion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;rpmrelease&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Manual how to work with devstation&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;repo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://github.com/alosadagrande/lorax&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;master&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/var/www/html/manual&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;In this case, we are using a Git repository to download useful information on how to deal with the customized image. However, it is possible to download for instance code or other information that can be stored in Git. And what is most important, it is versioned.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once edited, push the configuration to Image Builder and start the building process by selecting the blueprint and the output format. Builder Image tool can export the same blueprint into multiple output formats. Thus, one blueprint might create the same custom image running on multiple providers (qcow2 in our case).&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli blueprints push devstation-centos8.toml

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli compose start devstation-centos8 qcow2
Compose 248161f5-0870-41e8-b871-001348395ca7 added to the queue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;It is possible to verify that the modified blueprint has been pushed successfully by executing the show command.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli blueprints show devstation-centos8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The building process can take tens of minutes. It is possible to see the process by checking the lorax-composer logs in the journal or request the status of the blueprint built from the composer-cli:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli compose status
248161f5-0870-41e8-b871-001348395ca7 RUNNING  Fri Nov 27 15:12:09 2020 devstation-centos8 0.0.2 qcow2

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;journalctl &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; lorax-composer &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
Nov 27 15:13:31 eko3.cloud.lab.eng.bos.redhat.com lorax-composer[38218]: 2020-11-27 15:13:31,715: Installing.
Nov 27 15:13:31 eko3.cloud.lab.eng.bos.redhat.com lorax-composer[38218]: 2020-11-27 15:13:31,716: Starting package installation process
Nov 27 15:13:31 eko3.cloud.lab.eng.bos.redhat.com lorax-composer[38218]: 2020-11-27 15:13:31,716: Downloading packages
Nov 27 15:13:31 eko3.cloud.lab.eng.bos.redhat.com lorax-composer[38218]: 2020-11-27 15:13:31,716: Downloading 474 RPMs, 3.75 MiB / 396.83 MiB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Nov 27 15:13:31 eko3.cloud.lab.eng.bos.redhat.com lorax-composer[38218]: 2020-11-27 15:13:31,716: Downloading 474 RPMs, 15.58 MiB / 396.83 MiB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the building process is finished, it is time to download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QCOW2&lt;/code&gt; file. It can be downloaded from Cockpit UI or from the composer-cli:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer-cli compose image 248161f5-0870-41e8-b871-001348395ca7
248161f5-0870-41e8-b871-001348395ca7-disk.qcow2: 1854.31 MB

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lhrt&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  1 root root 1.5K Nov 27 15:11 devstation-centos8.toml
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  1 root root 1.9G Nov 27 15:26 248161f5-0870-41e8-b871-001348395ca7-disk.qcow2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afterwards, the image is suggested to be renamed to something more meaningful. Below the information given by qemu is exhibited:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;248161f5-0870-41e8-b871-001348395ca7-disk.qcow2  golden-devstation-centos8-disk.qcow2

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img info golden-devstation-centos8-disk.qcow2
image: golden-devstation-centos8-disk.qcow2
file format: qcow2
virtual size: 4.3G &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4566548480 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
disk size: 1.8G
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: &lt;span class=&quot;nb&quot;&gt;false
    &lt;/span&gt;refcount bits: 16
    corrupt: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;Virtual size of the image is 4.3G, since we agreed 10G the disk must be resized and root filesystem expanded before being containerized. Currently, there is no way to specify disk capacity in containerDisk as it can be done with &lt;a href=&quot;https://github.com/kubevirt/kubevirt/blob/master/docs/container-empty-disks.md#implementation&quot;&gt;emptyDisks&lt;/a&gt;. The size of the root filesystem and disk when running in KubeVirt is driven by the image.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;It is recommended to save the QCOW2 images under /var/lib/libvirt/images/ so that qemu user have permissions to expand or resize them.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img resize golden-devstation-centos8-disk.qcow2 10G
Image resized.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The expansion is executed on the root partition, which in case of our golden image is &lt;strong&gt;/dev/sda2&lt;/strong&gt; partition. It must be checked previously, for instance using the &lt;em&gt;virt-filesystems&lt;/em&gt; utility:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-filesystems &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--long&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; golden-devstation-centos8-disk.qcow2
Name       Type       MBR  Size        Parent
/dev/sda1  partition  83   1073741824  /dev/sda
/dev/sda2  partition  83   2966421504  /dev/sda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that a &lt;strong&gt;copy of the golden image&lt;/strong&gt; is created and that‚Äôs the one expanded.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;golden-devstation-centos8-disk.qcow2 golden-devstation-centos8-disk-10G.qcow2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-resize &lt;span class=&quot;nt&quot;&gt;--expand&lt;/span&gt; /dev/sda2  golden-devstation-centos8-disk.qcow2 golden-devstation-centos8-disk-10G.qcow2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   0.0] Examining golden-devstation-centos8-disk-10G.qcow2
&lt;span class=&quot;k&quot;&gt;**********&lt;/span&gt;

Summary of changes:

/dev/sda1: This partition will be left alone.

/dev/sda2: This partition will be resized from 2.7G to 9.0G.  The
filesystem xfs on /dev/sda2 will be expanded using the ‚Äòxfs_growfs‚Äô
method.

&lt;span class=&quot;k&quot;&gt;**********&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   2.2] Setting up initial partition table on golden-devstation-centos8-disk-10G.qcow2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   3.1] Copying /dev/sda1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   4.0] Copying /dev/sda2
 100%
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;   8.5] Expanding /dev/sda2 using the ‚Äòxfs_growfs‚Äô method

Resize operation completed with no errors.  Before deleting the old disk,
carefully check that the resized disk boots and works correctly.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, it is verified that the image meets the expected size (see virtual size):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img info golden-devstation-centos8-disk-10G.qcow2
image: golden-devstation-centos8-disk-10G.qcow2
file format: qcow2
virtual size: 10G &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10737418240 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
disk size: 1.8G
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: &lt;span class=&quot;nb&quot;&gt;false
    &lt;/span&gt;refcount bits: 16
    corrupt: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;In case the developers are allowed to select between multiple flavours, e.g. different root filesystem sizes, you will end up with multiple containerized VM images. In the event that an additional block device is needed, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emptyDisk&lt;/code&gt; is the proper way to go.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;verify-the-custom-built-image&quot;&gt;Verify the custom-built image&lt;/h3&gt;

&lt;p&gt;Before continuing, it is suggested to verify the golden expanded image. Since the qcow2 image is not yet containerized, it can easily run on KVM/libvirt. In our case, the builder server has already in place the &lt;em&gt;Virtualization Host&lt;/em&gt; group packages.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;There are a lot of tools that allow us to run a qcow2 image in libvirt. In this example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virt-install&lt;/code&gt; is used, however, other tool that makes easy to deploy VM images and worth exploring is &lt;a href=&quot;https://github.com/karmab/kcli&quot;&gt;kcli&lt;/a&gt;&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;First, install &lt;a href=&quot;https://linux.die.net/man/1/virt-install&quot;&gt;virt-install&lt;/a&gt;, which is a command-line tool for creating new KVM, Xen, or Linux container guests using the ‚Äúlibvirt‚Äù hypervisor management library, and run a new VM from the golden image:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;virt-install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-install &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
2.2.1

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-install &lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt; 2048 &lt;span class=&quot;nt&quot;&gt;--vcpus&lt;/span&gt; 2 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; devstation-centos8 &lt;span class=&quot;nt&quot;&gt;--disk&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos8-disk-10G.qcow2,device&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;disk &lt;span class=&quot;nt&quot;&gt;--os-type&lt;/span&gt; Linux &lt;span class=&quot;nt&quot;&gt;--os-variant&lt;/span&gt; rhel8.1 &lt;span class=&quot;nt&quot;&gt;--virt-type&lt;/span&gt; kvm &lt;span class=&quot;nt&quot;&gt;--graphics&lt;/span&gt; none &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; default &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt;

Starting install...
Connected to domain devstation-centos8
Escape character is ^]

CentOS Linux 8 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Core&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Kernel 4.18.0-147.5.1.el8_1.x86_64 on an x86_64
devstation login:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Login as &lt;a href=&quot;#image-creation-with-builder-tool&quot;&gt;developer or sysadmin user&lt;/a&gt;, scale privileges and check that the VM is configured as expected.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--list-all&lt;/span&gt;
public &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;active&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  target: default
  icmp-block-inversion: no
  interfaces: ens3
  sources:
  services: cockpit dhcpv6-client http https mysql ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl is-active httpd
active
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl is-active mariadb
active
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl is-active sshd
active
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify the disk and partition sizes are correctly configured:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsblk
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    252:0    0  10G  0 disk
‚îú‚îÄvda1 252:1    0   1G  0 part /boot
‚îî‚îÄvda2 252:2    0   9G  0 part /

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
Filesystem      Size  Used Avail Use% Mounted on
devtmpfs        962M     0  962M   0% /dev
tmpfs           995M     0  995M   0% /dev/shm
tmpfs           995M   17M  979M   2% /run
tmpfs           995M     0  995M   0% /sys/fs/cgroup
/dev/vda2       9.0G  1.9G  7.2G  21% /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;In case you are unsure on which partition you need to expand or contains the root filesystem, just run a VM from the golden qcow2 image and execute the previous commands. Then delete the VM and expand the image accordingly.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, notice how the cloned repository has been copied successfully during the built process. Users can check the custom image information connecting to the local Apache server:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@devstation ~]# curl localhost/manual/
Dear developer,
&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
Welcome to the devstation server.

&amp;lt;h2&amp;gt; How to use the devstation server &amp;lt;/h2&amp;gt;

Remember that before committing your changes to the corporate &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;management control server, you need to validate your code here.

&amp;lt;h2&amp;gt; Need &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;? &amp;lt;/h2&amp;gt;

Please contact us at sysadmin@corporate.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;image-tailoring-with-virt-customize&quot;&gt;Image tailoring with virt-customize&lt;/h3&gt;

&lt;p&gt;In the previous section, we verified that the golden image was successfully built. However, there are still a few things that need to be added so that the golden image can be successfully containerized and run on top of our OKD Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;First, a worthy package that is suggested to be included in the golden image is &lt;a href=&quot;https://cloud-init.io/&quot;&gt;cloud-init&lt;/a&gt;. KubeVirt allows you to create VM objects along with &lt;a href=&quot;https://kubevirt.io/user-guide/virtual_machines/startup_scripts/#cloud-init&quot;&gt;cloud-init&lt;/a&gt; configurations. Cloud-init will let our developers further adapt the custom image to their application needs. On the other hand, it has been agreed with the Software Engineering team to add a graphical interface to the custom image since there are developers that are not familiar with the terminal.&lt;/p&gt;

&lt;p&gt;The result will be &lt;strong&gt;two golden images CentOS 8&lt;/strong&gt;, both with cloud-init, but one will include a GUI and the other is terminal-based and therefore much lighter.&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;It is important to set the memsize of the building process to 4096m and have expanded the root filesystem otherwise you will face an out of space or/and out of memory error while installing the GNOME GUI.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;golden-devstation-centos8-disk-10G.qcow2 golden-devstation-centos8-disk-10G-gui.qcow2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-customize &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; qcow2 &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos8-disk-10G.qcow2 &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; cloud-init &lt;span class=&quot;nt&quot;&gt;--memsize&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;--selinux-relabel&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-customize &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; qcow2 &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos8-disk-10G-gui.qcow2 &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; @graphical-server-environment,cloud-init &lt;span class=&quot;nt&quot;&gt;--memsize&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;--run-command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;systemctl set-default graphical.target&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--selinux-relabel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At this point we built:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A golden CentOS 8 image which can run on libvirt/KVM virtualization servers (golden-devstation-centos8-disk.qcow2)&lt;/li&gt;
  &lt;li&gt;A 10G CentOS 8 image prepared to be executed by KubeVirt including cloud-init. (golden-devstation-centos8-disk-10G.qcow2)&lt;/li&gt;
  &lt;li&gt;A 10G CentOS 8 image prepared to be executed by KubeVirt including both cloud-init and GNOME GUI (golden-devstation-centos8-disk-10G-gui.qcow2)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;building-a-standard-centos-7-image-from-cloud-images&quot;&gt;Building a standard CentOS 7 image from cloud images&lt;/h2&gt;

&lt;p&gt;In the previous section, it was shown how we can build and customize images from scratch using the Builder Image tool. However, there are settings that could not be configured even with the composer-cli. Thus, &lt;em&gt;virt-customize&lt;/em&gt; is used to fine-tune the custom image, i.e, add cloud-init and a graphical user interface.&lt;/p&gt;

&lt;p&gt;Since the Builder Tool is an &lt;a href=&quot;https://docs.centos.org/en-US/centos/install-guide/Composer/&quot;&gt;experimental tool in CentOS 7&lt;/a&gt;, the company continues creating their golden CentOS 7 images based on CentOS cloud images. Comparing with the CentOS 8 workflow, the cloud image corresponds to the golden image even it is not built by the Systems Engineering department.&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;Note that with CentOS 7 images, the company is trusting a cloud image provided by a third party instead of creating one from scratch.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;image-creation-with-virt-customize&quot;&gt;Image creation with virt-customize&lt;/h3&gt;

&lt;p&gt;The process to create the golden CentOS 7 image is quite similar to the CentOS 8 one. However, in this case, the customize procedure is entirely done with &lt;em&gt;virt-customize&lt;/em&gt;. The first step is to download the cloud image.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos7-disk.qcow2 https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then, it is required to resize and expand the image to meet the agreed size of 10GB. The details are the same explained in the &lt;a href=&quot;#image-creation-with-builder-tool&quot;&gt;previous section&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img info golden-devstation-centos7-disk.qcow2
image: golden-devstation-centos7-disk.qcow2
file format: qcow2
virtual size: 8.0G &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8589934592 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
disk size: 819M
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: &lt;span class=&quot;nb&quot;&gt;false
    &lt;/span&gt;refcount bits: 16
    corrupt: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;qemu-img resize golden-devstation-centos7-disk.qcow2 10G
Image resized.

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;golden-devstation-centos7-disk.qcow2 golden-devstation-centos7-disk-10G.qcow2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-resize &lt;span class=&quot;nt&quot;&gt;--expand&lt;/span&gt; /dev/sda1  golden-devstation-centos7-disk.qcow2 golden-devstation-centos7-disk-10G.qcow2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition warning&quot;&gt;&lt;div class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Warning&lt;/p&gt;&lt;p&gt;In this case, unlike CentOS 8 image, the partition where the root filesystem resides is &lt;strong&gt;/dev/sda1&lt;/strong&gt;. That‚Äôs the partition that needs to be expanded.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Below it is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virt-customize&lt;/code&gt; command that modifies the CentOS 7 &lt;em&gt;expanded&lt;/em&gt; cloud image by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installing the required packages (however, not the exact versions)&lt;/li&gt;
  &lt;li&gt;Changing the root password&lt;/li&gt;
  &lt;li&gt;Setting devstation as hostname to the customized image&lt;/li&gt;
  &lt;li&gt;Configuring the time zone&lt;/li&gt;
  &lt;li&gt;Enabling the installed services&lt;/li&gt;
  &lt;li&gt;Including files from the manual.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;Manual files must be pulled first from &lt;a href=&quot;https://github.com/alosadagrande/lorax&quot;&gt;alosadagrande/lorax&lt;/a&gt; GitHub repository.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-customize &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; qcow2 &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos7-disk-10G.qcow2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; cloud-init,mod_ssl,httpd,mariadb-server,php,openssh-server &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;--memsize&lt;/span&gt; 4096  &lt;span class=&quot;nt&quot;&gt;--hostname&lt;/span&gt; devstation  &lt;span class=&quot;nt&quot;&gt;--selinux-relabel&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--timezone&lt;/span&gt; Europe/Madrid &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;--root-password&lt;/span&gt; password:toor &lt;span class=&quot;nt&quot;&gt;--password&lt;/span&gt; centos:password:developer123 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;--run-command&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'systemctl enable httpd'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--run-command&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'systemctl enable mariadb'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;--mkdir&lt;/span&gt; /var/www/html/manual &lt;span class=&quot;nt&quot;&gt;--upload&lt;/span&gt; ~/lorax/index.html:/var/www/html/manual/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;Instead of executing all parameters in the command-line it is possible to create a file that is used as an input file for &lt;em&gt;virt-customize&lt;/em&gt;. See option &lt;a href=&quot;http://libguestfs.org/virt-customize.1.html&quot;&gt;commands-from-file&lt;/a&gt;&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to create the graphical user interface image in a similar way as we did previously with CentOS 8 image.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;golden-devstation-centos7-disk-10G.qcow2 golden-devstation-centos7-disk-10G-gui.qcow2

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virt-customize &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; qcow2 &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /var/lib/libvirt/images/golden-devstation-centos7-disk-10G-gui.qcow2 &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; cloud-init &lt;span class=&quot;nt&quot;&gt;--memsize&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;--run-command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yum groupinstall 'GNOME Desktop' -y&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--run-command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;systemctl set-default graphical.target&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--selinux-relabel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point we built:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A golden CentOS 7 image which can run on libvirt/KVM virtualization servers (golden-devstation-centos7-disk.qcow2).&lt;/li&gt;
  &lt;li&gt;A 10G CentOS 7 image prepared to be executed by KubeVirt which includes cloud-init (golden-devstation-centos7-disk-10G.qcow2).&lt;/li&gt;
  &lt;li&gt;A 10G CentOS 7 image prepared to be executed by KubeVirt which includes cloud-init and GNOME GUI (golden-devstation-centos7-disk-10G-gui.qcow2).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;image-containerization-procedure&quot;&gt;Image containerization procedure&lt;/h2&gt;

&lt;p&gt;The procedure to inject a &lt;em&gt;VirtualMachineInstance&lt;/em&gt; disk into a container images is pretty well explained in &lt;a href=&quot;https://kubevirt.io/user-guide/virtual_machines/disks_and_volumes&quot;&gt;containerDisk Workflow example&lt;/a&gt; from the official documentation. Only RAW and QCOW2 formats are supported and the disk it is recommended to be placed into the /disk directory inside the container. Actually, it can be placed in other directories, but then, it must be explicitly configured when creating the &lt;em&gt;VirtualMachine&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Currently, there are 4 standardized images ready to be containerized. The process is the same for all of them, so in order to keep it short, we are just going to show the process of creating a container image from the CentOS 8 QCOW2 images.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;These are the four available images: CentOS 8 with GNOME, CentOS 8 terminal only, CentOS 7 with GNOME and CentOS 7 terminal only.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; Containerfile
FROM scratch
ADD golden-devstation-centos8-disk-10G.qcow2 /disk/
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;Containerfile
FROM scratch
ADD golden-devstation-centos8-disk-10G-gui.qcow2 /disk/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, it is time to build the image. In our case, &lt;a href=&quot;https://podman.io/&quot;&gt;podman&lt;/a&gt; has chosen to execute the task, however, we could have used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buildah&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman build &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; openshift/devstation-centos8:terminal
STEP 1: FROM scratch
STEP 2: ADD golden-devstation-centos8-disk-10G.qcow2 /disk/
STEP 3: COMMIT openshift/devstation-centos8:terminal
8a9e83db71f08995fa73699c4e5a2d331c61b393daa18aa0b63269dc10078467

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman build &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; openshift/devstation-centos8:gui
STEP 1: FROM scratch
STEP 2: ADD golden-devstation-centos8-disk-10G-gui.qcow2 /disk/
STEP 3: COMMIT openshift/devstation-centos8:gui
2a4ecc7bf9da91bcb5847fd1cf46f4cd10726a4ceae88815eb2a9ab38b316be4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the successful build, the images are stored locally to the local server, in our case the Builder Server. Remember that they must be uploaded to the OKD container registry.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman images
REPOSITORY                               TAG        IMAGE ID       CREATED          SIZE
localhost/openshift/devstation-centos8   gui        2a4ecc7bf9da   3 minutes ago    5.72 GB
localhost/openshift/devstation-centos8   terminal   8a9e83db71f0   13 minutes ago   1.94 GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;store-the-image-in-the-container-registry&quot;&gt;Store the image in the container registry&lt;/h3&gt;

&lt;p&gt;Before pushing the images to the corporate container registry, it must be verified that the OKD registry is available outside the Kubernetes cluster. This allows any authenticated user to gain external access to push images into the OKD Kubernetes cluster. &lt;a href=&quot;https://docs.openshift.com/container-platform/4.3/registry/securing-exposing-registry.html&quot;&gt;Exposing the secure registry&lt;/a&gt; consists basically on configuring a route and expose that route in the OKD routers. Once done, external &lt;strong&gt;authenticated&lt;/strong&gt; access is allowed.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;oc get route &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; openshift-image-registry
NAME            HOST/PORT                                                     PATH   SERVICES         PORT    TERMINATION   WILDCARD
default-route   default-route-openshift-image-registry.apps.okd.okdlabs.com          image-registry   &amp;lt;all&amp;gt;   reencrypt     None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition note&quot;&gt;&lt;div class=&quot;fa fa-check-square&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Note&lt;/p&gt;&lt;p&gt;In order to upload your containerized images to the OKD registry, the user must be authenticated and &lt;a href=&quot;https://docs.openshift.com/container-platform/4.3/registry/accessing-the-registry.html&quot;&gt;authorized to execute the push action&lt;/a&gt;. The role that must be added to the OKD user is the &lt;em&gt;registry-editor&lt;/em&gt;&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In order to authenticate with the OKD container registry, podman is employed as explained in the &lt;a href=&quot;https://docs.openshift.com/container-platform/4.3/registry/securing-exposing-registry.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;oc login https://api.okd.okdlabs.com:6443 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; alosadag
The server uses a certificate signed by an unknown authority.
You can bypass the certificate check, but any data you send to the server could be intercepted by others.
Use insecure connections? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: y

Authentication required &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;https://api.okd.okdlabs.com:6443 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;openshift&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Username: alosadag
Password:
Login successful.

&lt;span class=&quot;nv&quot;&gt;$ HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;oc get route default-route &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; openshift-image-registry &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jsonpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{.spec.host }'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOST&lt;/span&gt;
default-route-openshift-image-registry.apps.okd.okdlabs.com

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt; podman login &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;oc &lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;oc &lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tls-verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOST&lt;/span&gt;
Login Succeeded!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before pushing the images, adapt container images to the proper name so they can be uploaded to private registries. Since it is agreed that all developers must be able to pull the images into their namespaces, the images need to be pushed to the openshift project.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://docs.openshift.com/container-platform/4.6/openshift_images/images-understand.html&quot;&gt;Understanding containers, images and imageStreams&lt;/a&gt; from OpenShift documentation deeply explains container image naming.&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman tag localhost/openshift/devstation-centos8:gui default-route-openshift-image-registry.apps.okd.okdlabs.com/openshift/devstation:v8-terminal
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman push default-route-openshift-image-registry.apps.okd.okdlabs.com/openshift/devstation:v8-terminal &lt;span class=&quot;nt&quot;&gt;--tls-verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman tag localhost/openshift/devstation-centos:gui default-route-openshift-image-registry.apps.okd.okdlabs.com/openshift/devstation:v8-gui
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;podman push default-route-openshift-image-registry.apps.okd.okdlabs.com/openshift/devstation:v8-gui &lt;span class=&quot;nt&quot;&gt;--tls-verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify that the images are stored correctly in the OKD container registry by checking the &lt;a href=&quot;https://docs.openshift.com/container-platform/4.6/openshift_images/image-streams-manage.html#working-with-imagestreams&quot;&gt;imageStream&lt;/a&gt;. As shown below, both images were uploaded successfully since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devstation&lt;/code&gt; imageStream contains two images with v8-gui and v8-terminal tags respectively.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;oc describe imageStream devstation &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; openshift
Name:			devstation
Namespace:		openshift
Created:		23 hours ago
Labels:			&amp;lt;none&amp;gt;
Annotations:		&amp;lt;none&amp;gt;
Image Repository:	default-route-openshift-image-registry.apps.okd.okdlabs.com/openshift/devstation
Image Lookup:		&lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;Unique Images:		2
Tags:			2

v8-gui
  no spec tag

  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; image-registry.openshift-image-registry.svc:5000/openshift/devstation@sha256:e301d935c1cb5a64d41df340d78e6162ddb0ede9b9b5df9c20df10d78f8fde0f
      2 hours ago

v8-terminal
  no spec tag

  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; image-registry.openshift-image-registry.svc:5000/openshift/devstation@sha256:47c2ba0c463da84fa1569b7fb8552c07167f3464a9ce3b6e3f607207ba4cee65
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, the images are stored in a private registry and ready to be consumed by the developers.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;In case you do not have a corporate private registry available, you can upload images to any free public container registry. Then, consume the container images from the public container registry. Just in case you want to use them or take a look, it has been uploaded to my &lt;a href=&quot;https://quay.io/repository/alosadag/devstation?tab=tags&quot;&gt;public container image repository at quay.io&lt;/a&gt;&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;my-gallery&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageGallery&quot;&gt;
  &lt;figure itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;
    &lt;a href=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/okd_is_devstation.png&quot; itemprop=&quot;contentUrl&quot; data-size=&quot;1110x467&quot;&gt;
      &lt;img src=&quot;/assets/2020-12-01-Customizing-images-for-containerized-vms/okd_is_devstation.png&quot; itemprop=&quot;thumbnail&quot; width=&quot;100%&quot; alt=&quot;VM to VM&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption itemprop=&quot;caption description&quot;&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In the next article, we will show how our developers can consume the custom-built images to run into the OKD Kubernetes cluster.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, it was detailed a real use of a company that uses KubeVirt to run standardized environments to run and test the code of their applications. In their use case, VMs are spinned up on-demand in the OKD Kubernetes cluster by the developers. This makes them completely autonomous creating and deleting their environments once the tasks are accomplished.&lt;/p&gt;

&lt;p&gt;The article explained how to create a golden image using different tools such as Builder Tool and virt-customize. Once the custom-built image was ready, then it is transformed into a container image so that it can be uploaded and stored into a container registry.&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt;&lt;div class=&quot;fa fa-info-circle&quot;&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p class=&quot;header&quot;&gt;Information&lt;/p&gt;&lt;p&gt;In the next blog post, the custom-built containerized VM will be deployed from our corporate registry into our Kubernetes cluster. We will show how the developers can fine-tune even more the image deployment, how extra storage can be requested and how to connect to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualMachineInstance&lt;/code&gt;. Stay tuned!&lt;/p&gt;


&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubevirt.io/pages/cloud.html&quot;&gt;KubeVirt installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.redhat.com/blog/2019/05/08/red-hat-enterprise-linux-8-image-builder-building-custom-system-images/&quot;&gt;Image Builder: Building custom system images&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://weldr.io/lorax/composer-cli.html&quot;&gt;Composer-cli information&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://quay.io/repository/alosadag/devstation?tab=tags&quot;&gt;Custom-built images available at quay.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Alberto Losada Grande</name></author><category term="news" /><category term="kubevirt" /><category term="kubernetes" /><category term="virtual machine" /><category term="okd" /><category term="containerDisk" /><category term="registry" /><category term="composer-cli" /><category term="virt-customize" /><category term="builder tool" /><summary type="html">Table of contents</summary></entry><entry><title type="html">Monitoring KubeVirt VMs from the inside</title><link href="https://kubevirt.io//2020/Monitoring-KubeVirt-VMs-from-the-inside.html" rel="alternate" type="text/html" title="Monitoring KubeVirt VMs from the inside" /><published>2020-12-10T00:00:00+00:00</published><updated>2020-12-10T00:00:00+00:00</updated><id>https://kubevirt.io//2020/Monitoring-KubeVirt-VMs-from-the-inside</id><content type="html" xml:base="https://kubevirt.io//2020/Monitoring-KubeVirt-VMs-from-the-inside.html">&lt;h1 id=&quot;monitoring-kubevirt-vms-from-the-inside&quot;&gt;Monitoring KubeVirt VMs from the inside&lt;/h1&gt;

&lt;p&gt;This blog post will guide you on how to monitor KubeVirt Linux based VirtualMachines with Prometheus &lt;a href=&quot;https://github.com/prometheus/node_exporter&quot;&gt;node-exporter&lt;/a&gt;. Since node_exporter will run inside the VM and expose metrics at an HTTP endpoint, you can use this same guide to expose custom applications that expose metrics in the Prometheus format.&lt;/p&gt;

&lt;h2 id=&quot;environment&quot;&gt;Environment&lt;/h2&gt;

&lt;p&gt;This set of tools will be used on this guide:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/helm/helm&quot;&gt;Helm v3&lt;/a&gt; - To deploy the Prometheus-Operator.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/minikube&quot;&gt;minikube&lt;/a&gt; - Will provide us a k8s cluster, you are free to choose any other k8s provider though.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/kubectl&quot;&gt;kubectl&lt;/a&gt; - To deploy different k8s resources&lt;/li&gt;
  &lt;li&gt;virtctl - to interact with KubeVirt VirtualMachines, can be downloaded from the &lt;a href=&quot;https://github.com/kubevirt/kubevirt/releases&quot;&gt;KubeVirt repo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deploy-prometheus-operator&quot;&gt;Deploy Prometheus Operator&lt;/h2&gt;

&lt;p&gt;Once you have your k8s cluster, with minikube or any other provider, the first step will be to deploy the Prometheus Operator. The reason is that the KubeVirt CR, when installed on the cluster, will detect if the ServiceMonitor CR already exists. If it does, then it will create ServiceMonitors configured to monitor all the KubeVirt components (virt-controller, virt-api, and virt-handler) out-of-the-box.&lt;/p&gt;

&lt;p&gt;Although monitoring KubeVirt itself is not covered in this guide, it is a good practice to always deploy the Prometheus Operator before deploying KubeVirt.&lt;/p&gt;

&lt;p&gt;To deploy the Prometheus Operator, you will need to create its namespace first, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitoring&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create ns monitoring
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then deploy the operator in the new namespace:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm fetch stable/prometheus-operator
tar xzf prometheus-operator*.tgz
cd prometheus-operator/ &amp;amp;&amp;amp; helm install -n monitoring -f values.yaml kubevirt-prometheus stable/prometheus-operator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After everything is deployed, you can delete everything that was downloaded by helm:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ..
rm -rf prometheus-operator*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One thing to keep in mind is the release name we added here: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubevirt-prometheus&lt;/code&gt;. The release name will be used when declaring our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServiceMonitor&lt;/code&gt; later on..&lt;/p&gt;

&lt;h2 id=&quot;deploy-kubevirt-operators-and-kubevirt-customresources&quot;&gt;Deploy KubeVirt Operators and KubeVirt CustomResources&lt;/h2&gt;

&lt;p&gt;Alright, the next step will be deploying KubeVirt itself. We will start with its operator.&lt;/p&gt;

&lt;p&gt;We will fetch the latest version, then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl create&lt;/code&gt; to deploy the manifest directly from Github::&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export KUBEVIRT_VERSION=$(curl -s https://api.github.com/repos/kubevirt/kubevirt/releases | grep tag_name | grep -v -- - | sort -V | tail -1 | awk -F':' '{print $2}' | sed 's/,//' | xargs)
kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-operator.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before deploying the KubeVirt CR, make sure that all kubevirt-operator replicas are ready, you can do that with:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl rollout status -n kubevirt deployment virt-operator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, we can deploy KubeVirt and wait for all it‚Äôs components to get ready in a similar manner:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-cr.yaml
kubectl rollout status -n kubevirt deployment virt-api
kubectl rollout status -n kubevirt deployment virt-controller
kubectl rollout status -n kubevirt daemonset virt-handler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we want to monitor VMs that can restart, we want our node-exporter to be persisted and, thus, we need to set up persistent storage for them. &lt;a href=&quot;https://github.com/kubevirt/containerized-data-importer&quot;&gt;CDI&lt;/a&gt; will be the component responsible for that, so we will deploy it‚Äôs operator and custom resource as well. As always, waiting for the right components to get ready before proceeding:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export CDI_VERSION=$(curl -s https://github.com/kubevirt/containerized-data-importer/releases/latest | grep -o &quot;v[0-9]\.[0-9]*\.[0-9]*&quot;)
kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/$CDI_VERSION/cdi-operator.yaml
kubectl rollout status -n cdi deployment cdi-operator

kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/$CDI_VERSION/cdi-cr.yaml
kubectl rollout status -n cdi deployment cdi-apiserver
kubectl rollout status -n cdi deployment cdi-uploadproxy
kubectl rollout status -n cdi deployment cdi-deployment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;deploying-a-virtualmachine-with-persistent-storage&quot;&gt;Deploying a VirtualMachine with persistent storage&lt;/h2&gt;

&lt;p&gt;Alright, cool. We have everything we need now. Let‚Äôs setup the VM.&lt;/p&gt;

&lt;p&gt;We will start with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersistenVolume&lt;/code&gt;‚Äôs required by &lt;a href=&quot;https://github.com/kubevirt/containerized-data-importer/blob/master/doc/datavolumes.md&quot;&gt;CDI‚Äôs DataVolume&lt;/a&gt; resources. Since I‚Äôm using minikube with no dynamic storage provider, I‚Äôll be creating 2 PVs with a reference to the PVCs that will claim them. Notice &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;claimRef&lt;/code&gt; in each of the PVs.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PersistentVolume&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;example-volume&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;storageClassName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;claimRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cirros-dv&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;accessModes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2Gi&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/example-volume/&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PersistentVolume&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;example-volume-scratch&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;storageClassName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;claimRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cirros-dv-scratch&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;accessModes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2Gi&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/example-volume-scratch/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the persistent storage in place, we can create our VM with the following manifest:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubevirt.io/v1alpha3&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;VirtualMachine&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;monitorable-vm&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;monitorable-vm&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;prometheus.kubevirt.io&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node-exporter&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1024Mi&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;disks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;virtio&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-data-volume&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataVolume&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cirros-dv&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-data-volume&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dataVolumeTemplates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cirros-dv&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;pvc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;storageClassName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;accessModes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReadWriteOnce&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2Gi&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that KubeVirt‚Äôs VirtualMachine resource has a VirtualMachine template and a dataVolumeTemplate. On the VirtualMachine template, it is important noticing that we named our VM &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitorable-vm&lt;/code&gt;, and we will use this name to connect to its console with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtctl&lt;/code&gt; later on. The label we‚Äôve added, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prometheus.kubevirt.io: &quot;node-exporter&quot;&lt;/code&gt;, is also important, since we‚Äôll use it when &lt;a href=&quot;#configuring-prometheus-to-scrape-the-vms-node-exporter&quot;&gt;configuring Prometheus to scrape the VM‚Äôs node-exporter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On dataVolumeTemplate, it is important noticing that we named the PVC &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cirros-dv&lt;/code&gt; and the DataVolume resource will create 2 PVCs with that, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cirros-dv&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cirros-dv-scratch&lt;/code&gt;. Notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cirros-dv&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cirros-dv-scratch&lt;/code&gt; are the names referenced on our PersistentVolume manifests. The names must match for this to work.&lt;/p&gt;

&lt;h2 id=&quot;installing-the-node-exporter-inside-the-vm&quot;&gt;Installing the node-exporter inside the VM&lt;/h2&gt;

&lt;p&gt;Once the VirtualMachineInstance is running, we can connect to its console using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtctl console monitorable-vm&lt;/code&gt;. If user and password are required, provide your credentials accordingly. If you are using the same disk image from this guide, the user and password are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cirros&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gocubsgo&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;The following script will install node-exporter and configure the VM to always start the exporter when booting:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-LO&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
&lt;span class=&quot;nb&quot;&gt;gunzip&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; node_exporter-1.0.1.linux-amd64.tar.gz | &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xopf -
./node_exporter-1.0.1.linux-amd64/node_exporter &amp;amp;

&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cat &amp;gt; /etc/rc.local &amp;lt;&amp;lt;EOF
#!/bin/sh
echo &quot;Starting up node_exporter at :9100!&quot;

/home/cirros/node_exporter-1.0.1.linux-amd64/node_exporter 2&amp;gt;&amp;amp;1 &amp;gt; /dev/null &amp;amp;
EOF'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; +x /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;P.S.: If you are using a different base image, please configure node-exporter to start at boot time accordingly&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuring-prometheus-to-scrape-the-vms-node-exporter&quot;&gt;Configuring Prometheus to scrape the VM‚Äôs node-exporter&lt;/h2&gt;

&lt;p&gt;To configure Prometheus to scrape the node-exporter (or other applications) is really simple. All we need is to create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServiceMonitor&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;monitorable-vm-node-exporter&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;prometheus.kubevirt.io&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node-exporter&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;metrics&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9100&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9100&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;prometheus.kubevirt.io&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node-exporter&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServiceMonitor&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubevirt-node-exporters-servicemonitor&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;monitoring&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;prometheus.kubevirt.io&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node-exporter&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;monitoring&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespaceSelector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;prometheus.kubevirt.io&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node-exporter&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;endpoints&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;metrics&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;15s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let‚Äôs break this down just to make sure we set up everything right. Starting with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;metrics&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9100&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9100&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;prometheus.kubevirt.io&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node-exporter&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On the specification, we are creating a new port named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metrics&lt;/code&gt; that will be redirected to every pod labeled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prometheus.kubevirt.io: &quot;node-exporter&quot;&lt;/code&gt;, at port 9100, which is the default port number for the node-exporter.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;monitorable-vm-node-exporter&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;prometheus.kubevirt.io&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node-exporter&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We are also labeling the Service itself with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prometheus.kubevirt.io: &quot;node-exporter&quot;&lt;/code&gt;, that will be used by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServiceMonitor&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs take a look at our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServiceMonitor&lt;/code&gt; specification:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespaceSelector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;prometheus.kubevirt.io&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node-exporter&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;endpoints&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;metrics&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;15s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since our ServiceMonitor will be deployed at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitoring&lt;/code&gt; namespace, but our service is at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; namespace, we need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namespaceSelector.any=true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are also telling our ServiceMonitor that Prometheus needs to scrape endpoints from services labeled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prometheus.kubevirt.io: &quot;node-exporter&quot;&lt;/code&gt; and which ports are named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metrics&lt;/code&gt;. Luckily, that‚Äôs exactly what we did with our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;One last thing to keep an eye on. Prometheus configuration can be set up to watch multiple ServiceMonitors. We can see which ServiceMonitors our Prometheus is watching with the following command:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Look for Service Monitor Selector
kubectl describe -n monitoring prometheuses.monitoring.coreos.com monitoring-prometheus-oper-prometheus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure our ServiceMonitor has all labels required by Prometheus‚Äô &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service Monitor Selector&lt;/code&gt;. One common selector is the release name that we‚Äôve set when deploying our Prometheus with helm!&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;You can do a quick test by port-forwarding Prometheus web UI and executing some PromQL:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl port-forward -n monitoring prometheus-monitoring-prometheus-oper-prometheus-0 9090:9090
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make sure everything is working, access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:9090/graph&lt;/code&gt; and execute the PromQL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up{pod=~&quot;virt-launcher.*&quot;}&lt;/code&gt;. Prometheus should return data that is being collected from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitorable-vm&lt;/code&gt;‚Äôs node-exporter.&lt;/p&gt;

&lt;p&gt;You can play around with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtctl&lt;/code&gt;, stop and starting the VM to see how the metrics behave. You will notice that when stopping the VM with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtctl stop monitorable-vm&lt;/code&gt;, the VirtualMachineInstance is killed and, thus, so is it‚Äôs pod. This will result with our service not being able to find the pod‚Äôs endpoint and then it will be removed from Prometheus‚Äô targets.&lt;/p&gt;

&lt;p&gt;With this behavior, alerts like the one below won‚Äôt work since our target is literally gone, not down.&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;KubeVirtVMDown&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;up{pod=~&quot;virt-launcher.*&quot;} == &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1m&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;warning&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;KubeVirt VM {{ $labels.pod }} is down.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt;, if the VM is constantly crashing without being stopped, the pod won‚Äôt be killed and the target will still be monitored. Node-exporter will never start or will go down constantly alongside the VM, so an alert like this might work:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;KubeVirtVMCrashing&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;up{pod=~&quot;virt-launcher.*&quot;} == &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5m&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;critical&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;KubeVirt VM {{ $labels.pod }} is constantly crashing before node-exporter starts at boot.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this blog post we used &lt;a href=&quot;https://github.com/prometheus/node_exporter&quot;&gt;node-exporter&lt;/a&gt; to expose metrics out of a KubeVirt VM. We also configured &lt;a href=&quot;https://github.com/prometheus-operator/prometheus-operator&quot;&gt;Prometheus Operator&lt;/a&gt; to collect these metrics. This illustrates how to bring Kubernetes monitoring best practices with applications running inside KubeVirt VMs.&lt;/p&gt;</content><author><name>arthursens</name></author><category term="uncategorized" /><category term="kubevirt" /><category term="Kubernetes" /><category term="virtual machine" /><category term="VM" /><category term="prometheus" /><category term="prometheus-operator" /><category term="node-exporter" /><category term="monitoring" /><summary type="html">Monitoring KubeVirt VMs from the inside</summary></entry><entry><title type="html">High Availability ‚Äì RunStrategies for Virtual Machines</title><link href="https://kubevirt.io//2020/run_strategies.html" rel="alternate" type="text/html" title="High Availability ‚Äì RunStrategies for Virtual Machines" /><published>2020-12-04T00:00:00+00:00</published><updated>2020-12-04T00:00:00+00:00</updated><id>https://kubevirt.io//2020/run_strategies</id><content type="html" xml:base="https://kubevirt.io//2020/run_strategies.html">&lt;h1 id=&quot;why-isnt-my-vm-running&quot;&gt;Why Isn‚Äôt My VM Running?&lt;/h1&gt;

&lt;p&gt;There‚Äôs been a longstanding point of confusion in KubeVirt‚Äôs API. One that was raised yet again a few times recently. The confusion stems from the ‚ÄúRunning‚Äù field of the VM spec. Language has meaning. It‚Äôs natural to take it at face value that ‚ÄúRunning‚Äù means ‚ÄúRunning‚Äù, right? Well, not so fast.&lt;/p&gt;

&lt;h1 id=&quot;spec-vs-status&quot;&gt;Spec vs Status&lt;/h1&gt;

&lt;p&gt;KubeVirt objects follow Kubernetes convention in that they generally have Spec and Status stanzas. The Spec is user configurable and allows the user to indicate the desired state of the cluster in a declarative manner. Meanwhile status sections are not user configurable and reflect the actual state of things in the cluster. In short, users edit the Spec and controllers edit the Status.&lt;/p&gt;

&lt;p&gt;So back to the Running field. In this case the Running field is in the VM‚Äôs Spec. In other words it‚Äôs the user‚Äôs intent that the VM is running. It doesn‚Äôt reflect the actual running state of the VM.&lt;/p&gt;

&lt;h1 id=&quot;runstrategy&quot;&gt;RunStrategy&lt;/h1&gt;

&lt;p&gt;There‚Äôs a flip side to the above, equally as confusing: ‚ÄúRunning‚Äù isn‚Äôt always what the user wants. If a user logs into a VM and shuts it down from inside the guest, KubeVirt will dutifully re-spawn it! There certainly exist high availability use cases where that‚Äôs exactly the correct reaction, but in most cases that‚Äôs just plain confusing. Shutdown is not restart!&lt;/p&gt;

&lt;p&gt;We decided to tackle both issues at the same time‚Äìby deprecating the ‚ÄúRunning‚Äù field. As already noted, we could have picked a better name to begin with. By using the name ‚ÄúRunStrategy‚Äù, it should hopefully be more clear to the end user that they‚Äôre asking for a state, which is of course completely separate from what the system can actually provide. While RunStrategy helps address the nomenclature confusion, it also happens to be an enumerated value. Since Running is a boolean, it can only be true or false. We‚Äôre now able to create more meaningful states to accommodate different use cases.&lt;/p&gt;

&lt;h2 id=&quot;four-runstrategies-currently-exist&quot;&gt;Four RunStrategies currently exist:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Always: If a VM is stopped for any reason, a new instance will be spawned.&lt;/li&gt;
  &lt;li&gt;RerunOnFailure: If a VM ends execution in an error state, a new instance will be spawned. This addressed the second concern listed above. If a user halts a VM manually a new instance will not be spawned.&lt;/li&gt;
  &lt;li&gt;Manual: This is exactly what it means. KubeVirt will neither attempt to start or stop a VM. In order to change state, the user must invoke start/stop/restart from the API. There exist convenience functions in the virtctl command line client as well.&lt;/li&gt;
  &lt;li&gt;Halted: The VM will be stopped if it‚Äôs running, and will remain off.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example using the RerunOnFailure RunStrategy was presented in &lt;a href=&quot;/2020/KubeVirt-VM-Image-Usage-Patterns.html&quot;&gt;KubeVirt VM Image Usage Patterns&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;high-availability&quot;&gt;High Availability&lt;/h1&gt;

&lt;p&gt;No discussion of RunStrategies is complete without mentioning High Availability. After all, the implication behind the RerunOnFailure and Always RunStrategies is that your VM should always be available. For the most part this is completely true, but there‚Äôs one important scenario where there‚Äôs a gap to be aware of: if a node fails completely, e.g. loss of networking or power. Without some means of automatic detection that the node is no longer active, KubeVirt won‚Äôt know that the VM has failed. On OpenShift clusters installed using Installer Provisioned Infrastructure (IPI) with MachineHealthCheck enabled can detect failed nodes and reschedule workloads running there.&lt;/p&gt;

&lt;p&gt;Mode information on IPI and MHC can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.openshift.com/container-platform/4.6/installing/installing_bare_metal_ipi/ipi-install-overview.html#ipi-install-overview&quot;&gt;Installer Provisioned Infrastructure&lt;/a&gt;
&lt;a href=&quot;https://docs.openshift.com/container-platform/4.6/machine_management/deploying-machine-health-checks.html&quot;&gt;Machine Health Check&lt;/a&gt;&lt;/p&gt;</content><author><name>Stu Gott</name></author><category term="news" /><category term="kubevirt" /><category term="Kubernetes" /><category term="virtual machine" /><category term="VM" /><summary type="html">Why Isn‚Äôt My VM Running?</summary></entry><entry><title type="html">KubeVirt v0.35.0</title><link href="https://kubevirt.io//2020/changelog-v0.35.0.html" rel="alternate" type="text/html" title="KubeVirt v0.35.0" /><published>2020-11-09T00:00:00+00:00</published><updated>2020-11-09T00:00:00+00:00</updated><id>https://kubevirt.io//2020/changelog-v0.35.0</id><content type="html" xml:base="https://kubevirt.io//2020/changelog-v0.35.0.html">&lt;h2 id=&quot;v0350&quot;&gt;v0.35.0&lt;/h2&gt;

&lt;p&gt;Released on: Mon Nov 9 13:08:27 2020 +0000&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[PR #4409][vladikr] Increase the static memory overhead by 10Mi&lt;/li&gt;
  &lt;li&gt;[PR #4272][maiqueb] Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip-family&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtctl expose&lt;/code&gt; command.&lt;/li&gt;
  &lt;li&gt;[PR #4398][rmohr] VMIs reflect deleted stuck virt-launcher pods with the ‚ÄúPodTerminating‚Äù Reason in the ready condition. The VMIRS detects this reason and immediately creates replacement VMIs.&lt;/li&gt;
  &lt;li&gt;[PR #4393][salanki] Disable legacy service links in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virt-launcher&lt;/code&gt; Pods to speed up Pod instantiation and decrease Kubelet load in namespaces with many services.&lt;/li&gt;
  &lt;li&gt;[PR #2935][maiqueb] Add the macvtap BindMechanism.&lt;/li&gt;
  &lt;li&gt;[PR #4132][mstarostik] fixes a bug that prevented unique device name allocation when configuring both scsi and sata drives&lt;/li&gt;
  &lt;li&gt;[PR #3257][xpivarc] Added support of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl explain&lt;/code&gt; for Kubevirt resources.&lt;/li&gt;
  &lt;li&gt;[PR #4288][ezrasilvera] Adding DownwardAPI volumes type&lt;/li&gt;
  &lt;li&gt;[PR #4233][maya-r] Update base image used for pods to Fedora 31.&lt;/li&gt;
  &lt;li&gt;[PR #4192][xpivarc] We now run gosec in Kubevirt&lt;/li&gt;
  &lt;li&gt;[PR #4328][stu-gott] Version 2.x QEMU guest agents are supported.&lt;/li&gt;
  &lt;li&gt;[PR #4289][AlonaKaplan] Masquerade binding - set the virt-launcher pod interface MTU on the bridge.&lt;/li&gt;
  &lt;li&gt;[PR #4300][maiqueb] Update the NetworkInterfaceMultiqueue openAPI documentation to better specify its semantics within KubeVirt.&lt;/li&gt;
  &lt;li&gt;[PR #4277][awels] PVCs populated by DVs are now allowed as volumes.&lt;/li&gt;
  &lt;li&gt;[PR #4265][dhiller] Fix virtctl help text when running as a plugin&lt;/li&gt;
  &lt;li&gt;[PR #4273][dhiller] Only run Travis build for PRs against release branches&lt;/li&gt;
&lt;/ul&gt;</content><author><name>kubeü§ñ</name></author><category term="releases" /><category term="release notes" /><category term="changelog" /><summary type="html">v0.35.0</summary></entry></feed>